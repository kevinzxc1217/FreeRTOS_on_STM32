
LAB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005df0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005f80  08005f80  00015f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060c8  080060c8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080060c8  080060c8  000160c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060d0  080060d0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060d0  080060d0  000160d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060d4  080060d4  000160d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080060d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00012f2c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012fa0  20012fa0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012ccc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a81  00000000  00000000  00032d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  000357f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc8  00000000  00000000  000368c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000223d5  00000000  00000000  00037890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a19  00000000  00000000  00059c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1ffe  00000000  00000000  0006d67e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013f67c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a48  00000000  00000000  0013f6cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f68 	.word	0x08005f68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005f68 	.word	0x08005f68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationIdleHook>:
//	i += 1;
//	}
//}

void vApplicationIdleHook( void )
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
    volatile static int32_t xLastTx = 0;
    volatile int32_t xTimeNow;

    for(;;)
    {
        xTimeNow = xTaskGetTickCount();
 800058a:	f003 fa25 	bl	80039d8 <xTaskGetTickCount>
 800058e:	4603      	mov	r3, r0
 8000590:	607b      	str	r3, [r7, #4]
        if( ( xTimeNow - xLastTx ) >= ( 1000 / portTICK_PERIOD_MS ) )
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <vApplicationIdleHook+0x24>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800059e:	d3f4      	bcc.n	800058a <vApplicationIdleHook+0x6>
        {
            xLastTx = xTimeNow;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a01      	ldr	r2, [pc, #4]	; (80005a8 <vApplicationIdleHook+0x24>)
 80005a4:	6013      	str	r3, [r2, #0]
        xTimeNow = xTaskGetTickCount();
 80005a6:	e7f0      	b.n	800058a <vApplicationIdleHook+0x6>
 80005a8:	200000d4 	.word	0x200000d4

080005ac <TaskMonitor_App>:
        vTaskDelayUntil( &xLastWakeTime, xFrequency );
        // 在此处添加您的任务代码
    }
}

void TaskMonitor_App(void *pvParameters){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	for(;;){
	Taskmonitor();
 80005b4:	f003 ffee 	bl	8004594 <Taskmonitor>
	vTaskDelay(1000);
 80005b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005bc:	f003 f8e0 	bl	8003780 <vTaskDelay>
	Taskmonitor();
 80005c0:	e7f8      	b.n	80005b4 <TaskMonitor_App+0x8>
	...

080005c4 <Red_LED_App>:
	}
}


void Red_LED_App(void *pvParameters){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	uint32_t Redtimer = 800;
 80005cc:	f44f 7348 	mov.w	r3, #800	; 0x320
 80005d0:	60fb      	str	r3, [r7, #12]
	for(;;){
	HAL_GPIO_TogglePin(GPIOD,Red_LED_Pin);
 80005d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <Red_LED_App+0x28>)
 80005d8:	f000 fedf 	bl	800139a <HAL_GPIO_TogglePin>
	vTaskDelay(Redtimer);
 80005dc:	68f8      	ldr	r0, [r7, #12]
 80005de:	f003 f8cf 	bl	8003780 <vTaskDelay>
	Redtimer+=1;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	3301      	adds	r3, #1
 80005e6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_TogglePin(GPIOD,Red_LED_Pin);
 80005e8:	e7f3      	b.n	80005d2 <Red_LED_App+0xe>
 80005ea:	bf00      	nop
 80005ec:	40020c00 	.word	0x40020c00

080005f0 <Green_LED_App>:
	}
}

void Green_LED_App(void *pvParameters){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	uint32_t Greentimer = 1000;
 80005f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fc:	60fb      	str	r3, [r7, #12]
	for(;;){
	HAL_GPIO_TogglePin(GPIOD,Green_LED_Pin);
 80005fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <Green_LED_App+0x28>)
 8000604:	f000 fec9 	bl	800139a <HAL_GPIO_TogglePin>
	vTaskDelay(Greentimer);
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f003 f8b9 	bl	8003780 <vTaskDelay>
	Greentimer+=2;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	3302      	adds	r3, #2
 8000612:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_TogglePin(GPIOD,Green_LED_Pin);
 8000614:	e7f3      	b.n	80005fe <Green_LED_App+0xe>
 8000616:	bf00      	nop
 8000618:	40020c00 	.word	0x40020c00

0800061c <Delay_App>:
	}
}

void Delay_App(void *pvParameters){
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	int delayflag=0;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
	uint32_t delaytime;
	while(1){
	if(delayflag==0){
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d105      	bne.n	800063a <Delay_App+0x1e>
	delaytime = 1000;
 800062e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000632:	60bb      	str	r3, [r7, #8]
	delayflag=1;
 8000634:	2301      	movs	r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	e002      	b.n	8000640 <Delay_App+0x24>
	}else{
	delaytime=0xFFFFFFFF;
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	60bb      	str	r3, [r7, #8]
	}
	vTaskDelay(delaytime);
 8000640:	68b8      	ldr	r0, [r7, #8]
 8000642:	f003 f89d 	bl	8003780 <vTaskDelay>
	if(delayflag==0){
 8000646:	e7ef      	b.n	8000628 <Delay_App+0xc>

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064e:	f000 fbcb 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000652:	f000 f841 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000656:	f000 f8d3 	bl	8000800 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800065a:	f000 f8a7 	bl	80007ac <MX_USART2_UART_Init>
//		  128,
//		  NULL,
//		  0,
//		  NULL);

  xTaskCreate(
 800065e:	2300      	movs	r3, #0
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2301      	movs	r3, #1
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2300      	movs	r3, #0
 8000668:	2280      	movs	r2, #128	; 0x80
 800066a:	4913      	ldr	r1, [pc, #76]	; (80006b8 <main+0x70>)
 800066c:	4813      	ldr	r0, [pc, #76]	; (80006bc <main+0x74>)
 800066e:	f002 ff49 	bl	8003504 <xTaskCreate>
		  128,
		  NULL,
		  1,
		  NULL);

  xTaskCreate(
 8000672:	2300      	movs	r3, #0
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2301      	movs	r3, #1
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	4910      	ldr	r1, [pc, #64]	; (80006c0 <main+0x78>)
 8000680:	4810      	ldr	r0, [pc, #64]	; (80006c4 <main+0x7c>)
 8000682:	f002 ff3f 	bl	8003504 <xTaskCreate>
		  128,
		  NULL,
		  1,
		  NULL);

  xTaskCreate(
 8000686:	2300      	movs	r3, #0
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	230e      	movs	r3, #14
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2300      	movs	r3, #0
 8000690:	2280      	movs	r2, #128	; 0x80
 8000692:	490d      	ldr	r1, [pc, #52]	; (80006c8 <main+0x80>)
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <main+0x84>)
 8000696:	f002 ff35 	bl	8003504 <xTaskCreate>
		  128,
		  NULL,
		  14,
		  NULL);

  xTaskCreate(
 800069a:	2300      	movs	r3, #0
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2303      	movs	r3, #3
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2300      	movs	r3, #0
 80006a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006a8:	4909      	ldr	r1, [pc, #36]	; (80006d0 <main+0x88>)
 80006aa:	480a      	ldr	r0, [pc, #40]	; (80006d4 <main+0x8c>)
 80006ac:	f002 ff2a 	bl	8003504 <xTaskCreate>
		  256,
		  NULL,
		  3,
		  NULL);

  vTaskStartScheduler();
 80006b0:	f003 f89a 	bl	80037e8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <main+0x6c>
 80006b6:	bf00      	nop
 80006b8:	08005f80 	.word	0x08005f80
 80006bc:	080005c5 	.word	0x080005c5
 80006c0:	08005f8c 	.word	0x08005f8c
 80006c4:	080005f1 	.word	0x080005f1
 80006c8:	08005f9c 	.word	0x08005f9c
 80006cc:	0800061d 	.word	0x0800061d
 80006d0:	08005fa8 	.word	0x08005fa8
 80006d4:	080005ad 	.word	0x080005ad

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 ffc8 	bl	800567c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <SystemClock_Config+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a27      	ldr	r2, [pc, #156]	; (80007a4 <SystemClock_Config+0xcc>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <SystemClock_Config+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemClock_Config+0xd0>)
 8000722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	2310      	movs	r3, #16
 800073e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000748:	2308      	movs	r3, #8
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800074c:	2332      	movs	r3, #50	; 0x32
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000750:	2304      	movs	r3, #4
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000754:	2307      	movs	r3, #7
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fe37 	bl	80013d0 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000768:	f000 f9ba 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000778:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f001 f898 	bl	80018c0 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000796:	f000 f9a3 	bl	8000ae0 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	; 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <MX_USART2_UART_Init+0x50>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007e4:	f001 fd6c 	bl	80022c0 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ee:	f000 f977 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000090 	.word	0x20000090
 80007fc:	40004400 	.word	0x40004400

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
 800081a:	4ba2      	ldr	r3, [pc, #648]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4aa1      	ldr	r2, [pc, #644]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000820:	f043 0310 	orr.w	r3, r3, #16
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b9f      	ldr	r3, [pc, #636]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0310 	and.w	r3, r3, #16
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	4b9b      	ldr	r3, [pc, #620]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a9a      	ldr	r2, [pc, #616]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b98      	ldr	r3, [pc, #608]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b94      	ldr	r3, [pc, #592]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a93      	ldr	r2, [pc, #588]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b91      	ldr	r3, [pc, #580]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b8d      	ldr	r3, [pc, #564]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a8c      	ldr	r2, [pc, #560]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b8a      	ldr	r3, [pc, #552]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b86      	ldr	r3, [pc, #536]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a85      	ldr	r2, [pc, #532]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b83      	ldr	r3, [pc, #524]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b7f      	ldr	r3, [pc, #508]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a7e      	ldr	r2, [pc, #504]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b7c      	ldr	r3, [pc, #496]	; (8000aa4 <MX_GPIO_Init+0x2a4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2108      	movs	r1, #8
 80008c2:	4879      	ldr	r0, [pc, #484]	; (8000aa8 <MX_GPIO_Init+0x2a8>)
 80008c4:	f000 fd50 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2101      	movs	r1, #1
 80008cc:	4877      	ldr	r0, [pc, #476]	; (8000aac <MX_GPIO_Init+0x2ac>)
 80008ce:	f000 fd4b 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f247 0110 	movw	r1, #28688	; 0x7010
 80008d8:	4875      	ldr	r0, [pc, #468]	; (8000ab0 <MX_GPIO_Init+0x2b0>)
 80008da:	f000 fd45 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008de:	2308      	movs	r3, #8
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	486c      	ldr	r0, [pc, #432]	; (8000aa8 <MX_GPIO_Init+0x2a8>)
 80008f6:	f000 fb9b 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	4866      	ldr	r0, [pc, #408]	; (8000aac <MX_GPIO_Init+0x2ac>)
 8000912:	f000 fb8d 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000916:	2308      	movs	r3, #8
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000926:	2305      	movs	r3, #5
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	485e      	ldr	r0, [pc, #376]	; (8000aac <MX_GPIO_Init+0x2ac>)
 8000932:	f000 fb7d 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000936:	2301      	movs	r3, #1
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	485a      	ldr	r0, [pc, #360]	; (8000ab4 <MX_GPIO_Init+0x2b4>)
 800094c:	f000 fb70 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000950:	2310      	movs	r3, #16
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000960:	2306      	movs	r3, #6
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4852      	ldr	r0, [pc, #328]	; (8000ab4 <MX_GPIO_Init+0x2b4>)
 800096c:	f000 fb60 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000970:	23e0      	movs	r3, #224	; 0xe0
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000980:	2305      	movs	r3, #5
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	484a      	ldr	r0, [pc, #296]	; (8000ab4 <MX_GPIO_Init+0x2b4>)
 800098c:	f000 fb50 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000990:	2304      	movs	r3, #4
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4845      	ldr	r0, [pc, #276]	; (8000ab8 <MX_GPIO_Init+0x2b8>)
 80009a4:	f000 fb44 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ba:	2305      	movs	r3, #5
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	483c      	ldr	r0, [pc, #240]	; (8000ab8 <MX_GPIO_Init+0x2b8>)
 80009c6:	f000 fb33 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Orange_LED_Pin Red_LED_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Audio_RST_Pin;
 80009ca:	f247 0310 	movw	r3, #28688	; 0x7010
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4833      	ldr	r0, [pc, #204]	; (8000ab0 <MX_GPIO_Init+0x2b0>)
 80009e4:	f000 fb24 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009e8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009fa:	2306      	movs	r3, #6
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4829      	ldr	r0, [pc, #164]	; (8000aac <MX_GPIO_Init+0x2ac>)
 8000a06:	f000 fb13 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4825      	ldr	r0, [pc, #148]	; (8000ab4 <MX_GPIO_Init+0x2b4>)
 8000a20:	f000 fb06 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a24:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a36:	230a      	movs	r3, #10
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	481c      	ldr	r0, [pc, #112]	; (8000ab4 <MX_GPIO_Init+0x2b4>)
 8000a42:	f000 faf5 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a46:	2320      	movs	r3, #32
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4815      	ldr	r0, [pc, #84]	; (8000ab0 <MX_GPIO_Init+0x2b0>)
 8000a5a:	f000 fae9 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a5e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a64:	2312      	movs	r3, #18
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a70:	2304      	movs	r3, #4
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480f      	ldr	r0, [pc, #60]	; (8000ab8 <MX_GPIO_Init+0x2b8>)
 8000a7c:	f000 fad8 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a84:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_GPIO_Init+0x2a8>)
 8000a96:	f000 facb 	bl	8001030 <HAL_GPIO_Init>

}
 8000a9a:	bf00      	nop
 8000a9c:	3730      	adds	r7, #48	; 0x30
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40020800 	.word	0x40020800
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	40020000 	.word	0x40020000
 8000ab8:	40020400 	.word	0x40020400

08000abc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d101      	bne.n	8000ad2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ace:	f000 f9ad 	bl	8000e2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40001400 	.word	0x40001400

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <Error_Handler+0x8>
	...

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <HAL_MspInit+0x4c>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b00:	6453      	str	r3, [r2, #68]	; 0x44
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a08      	ldr	r2, [pc, #32]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800

08000b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <HAL_UART_MspInit+0x84>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12b      	bne.n	8000bb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b96:	230c      	movs	r3, #12
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <HAL_UART_MspInit+0x8c>)
 8000bb2:	f000 fa3d 	bl	8001030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	; 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40004400 	.word	0x40004400
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000

08000bcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08e      	sub	sp, #56	; 0x38
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	4b33      	ldr	r3, [pc, #204]	; (8000cb0 <HAL_InitTick+0xe4>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	4a32      	ldr	r2, [pc, #200]	; (8000cb0 <HAL_InitTick+0xe4>)
 8000be6:	f043 0320 	orr.w	r3, r3, #32
 8000bea:	6413      	str	r3, [r2, #64]	; 0x40
 8000bec:	4b30      	ldr	r3, [pc, #192]	; (8000cb0 <HAL_InitTick+0xe4>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	f003 0320 	and.w	r3, r3, #32
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bf8:	f107 0210 	add.w	r2, r7, #16
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 f87c 	bl	8001d00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c08:	6a3b      	ldr	r3, [r7, #32]
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d103      	bne.n	8000c1a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c12:	f001 f84d 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 8000c16:	6378      	str	r0, [r7, #52]	; 0x34
 8000c18:	e004      	b.n	8000c24 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c1a:	f001 f849 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c26:	4a23      	ldr	r2, [pc, #140]	; (8000cb4 <HAL_InitTick+0xe8>)
 8000c28:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2c:	0c9b      	lsrs	r3, r3, #18
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c32:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <HAL_InitTick+0xec>)
 8000c34:	4a21      	ldr	r2, [pc, #132]	; (8000cbc <HAL_InitTick+0xf0>)
 8000c36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c38:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <HAL_InitTick+0xec>)
 8000c3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c3e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c40:	4a1d      	ldr	r2, [pc, #116]	; (8000cb8 <HAL_InitTick+0xec>)
 8000c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c44:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c46:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <HAL_InitTick+0xec>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <HAL_InitTick+0xec>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c52:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <HAL_InitTick+0xec>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000c58:	4817      	ldr	r0, [pc, #92]	; (8000cb8 <HAL_InitTick+0xec>)
 8000c5a:	f001 f883 	bl	8001d64 <HAL_TIM_Base_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d11b      	bne.n	8000ca4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000c6c:	4812      	ldr	r0, [pc, #72]	; (8000cb8 <HAL_InitTick+0xec>)
 8000c6e:	f001 f8d3 	bl	8001e18 <HAL_TIM_Base_Start_IT>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d111      	bne.n	8000ca4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c80:	2037      	movs	r0, #55	; 0x37
 8000c82:	f000 f9c7 	bl	8001014 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d808      	bhi.n	8000c9e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	2037      	movs	r0, #55	; 0x37
 8000c92:	f000 f9a3 	bl	8000fdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_InitTick+0xf4>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	e002      	b.n	8000ca4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ca4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3738      	adds	r7, #56	; 0x38
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	431bde83 	.word	0x431bde83
 8000cb8:	200000d8 	.word	0x200000d8
 8000cbc:	40001400 	.word	0x40001400
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <NMI_Handler+0x4>

08000cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <TIM7_IRQHandler+0x10>)
 8000cf6:	f001 f8ff 	bl	8001ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200000d8 	.word	0x200000d8

08000d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <_sbrk+0x5c>)
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <_sbrk+0x60>)
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <_sbrk+0x64>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <_sbrk+0x68>)
 8000d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d207      	bcs.n	8000d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d34:	f004 fc6a 	bl	800560c <__errno>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	e009      	b.n	8000d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <_sbrk+0x64>)
 8000d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20020000 	.word	0x20020000
 8000d64:	00000400 	.word	0x00000400
 8000d68:	20000120 	.word	0x20000120
 8000d6c:	20012fa0 	.word	0x20012fa0

08000d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <SystemInit+0x20>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <SystemInit+0x20>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9a:	490e      	ldr	r1, [pc, #56]	; (8000dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db0:	4c0b      	ldr	r4, [pc, #44]	; (8000de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dbe:	f7ff ffd7 	bl	8000d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f004 fc29 	bl	8005618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fc3f 	bl	8000648 <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000dd8:	080060d8 	.word	0x080060d8
  ldr r2, =_sbss
 8000ddc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000de0:	20012fa0 	.word	0x20012fa0

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <HAL_Init+0x40>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_Init+0x40>)
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_Init+0x40>)
 8000e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f8d8 	bl	8000fc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	2000      	movs	r0, #0
 8000e18:	f7ff fed8 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fe66 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023c00 	.word	0x40023c00

08000e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x20>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x24>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <HAL_IncTick+0x24>)
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000124 	.word	0x20000124

08000e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <HAL_GetTick+0x14>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000124 	.word	0x20000124

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db0b      	blt.n	8000efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	4907      	ldr	r1, [pc, #28]	; (8000f08 <__NVIC_EnableIRQ+0x38>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000e100 	.word	0xe000e100

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	; (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	; 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff4c 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fee:	f7ff ff61 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8000ff2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	68b9      	ldr	r1, [r7, #8]
 8000ff8:	6978      	ldr	r0, [r7, #20]
 8000ffa:	f7ff ffb1 	bl	8000f60 <NVIC_EncodePriority>
 8000ffe:	4602      	mov	r2, r0
 8001000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff80 	bl	8000f0c <__NVIC_SetPriority>
}
 800100c:	bf00      	nop
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff54 	bl	8000ed0 <__NVIC_EnableIRQ>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	e16b      	b.n	8001324 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	429a      	cmp	r2, r3
 8001066:	f040 815a 	bne.w	800131e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b01      	cmp	r3, #1
 8001074:	d005      	beq.n	8001082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	2b02      	cmp	r3, #2
 8001080:	d130      	bne.n	80010e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	f003 0201 	and.w	r2, r3, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d017      	beq.n	8001120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d123      	bne.n	8001174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	08da      	lsrs	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3208      	adds	r2, #8
 8001134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3208      	adds	r2, #8
 800116e:	69b9      	ldr	r1, [r7, #24]
 8001170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0203 	and.w	r2, r3, #3
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80b4 	beq.w	800131e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b60      	ldr	r3, [pc, #384]	; (800133c <HAL_GPIO_Init+0x30c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a5f      	ldr	r2, [pc, #380]	; (800133c <HAL_GPIO_Init+0x30c>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b5d      	ldr	r3, [pc, #372]	; (800133c <HAL_GPIO_Init+0x30c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d2:	4a5b      	ldr	r2, [pc, #364]	; (8001340 <HAL_GPIO_Init+0x310>)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a52      	ldr	r2, [pc, #328]	; (8001344 <HAL_GPIO_Init+0x314>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d02b      	beq.n	8001256 <HAL_GPIO_Init+0x226>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a51      	ldr	r2, [pc, #324]	; (8001348 <HAL_GPIO_Init+0x318>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d025      	beq.n	8001252 <HAL_GPIO_Init+0x222>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a50      	ldr	r2, [pc, #320]	; (800134c <HAL_GPIO_Init+0x31c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d01f      	beq.n	800124e <HAL_GPIO_Init+0x21e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4f      	ldr	r2, [pc, #316]	; (8001350 <HAL_GPIO_Init+0x320>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d019      	beq.n	800124a <HAL_GPIO_Init+0x21a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4e      	ldr	r2, [pc, #312]	; (8001354 <HAL_GPIO_Init+0x324>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d013      	beq.n	8001246 <HAL_GPIO_Init+0x216>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4d      	ldr	r2, [pc, #308]	; (8001358 <HAL_GPIO_Init+0x328>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d00d      	beq.n	8001242 <HAL_GPIO_Init+0x212>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4c      	ldr	r2, [pc, #304]	; (800135c <HAL_GPIO_Init+0x32c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d007      	beq.n	800123e <HAL_GPIO_Init+0x20e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4b      	ldr	r2, [pc, #300]	; (8001360 <HAL_GPIO_Init+0x330>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d101      	bne.n	800123a <HAL_GPIO_Init+0x20a>
 8001236:	2307      	movs	r3, #7
 8001238:	e00e      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800123a:	2308      	movs	r3, #8
 800123c:	e00c      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800123e:	2306      	movs	r3, #6
 8001240:	e00a      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001242:	2305      	movs	r3, #5
 8001244:	e008      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001246:	2304      	movs	r3, #4
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800124a:	2303      	movs	r3, #3
 800124c:	e004      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800124e:	2302      	movs	r3, #2
 8001250:	e002      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001256:	2300      	movs	r3, #0
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	f002 0203 	and.w	r2, r2, #3
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4093      	lsls	r3, r2
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001268:	4935      	ldr	r1, [pc, #212]	; (8001340 <HAL_GPIO_Init+0x310>)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001276:	4b3b      	ldr	r3, [pc, #236]	; (8001364 <HAL_GPIO_Init+0x334>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800129a:	4a32      	ldr	r2, [pc, #200]	; (8001364 <HAL_GPIO_Init+0x334>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a0:	4b30      	ldr	r3, [pc, #192]	; (8001364 <HAL_GPIO_Init+0x334>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012c4:	4a27      	ldr	r2, [pc, #156]	; (8001364 <HAL_GPIO_Init+0x334>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ca:	4b26      	ldr	r3, [pc, #152]	; (8001364 <HAL_GPIO_Init+0x334>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ee:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <HAL_GPIO_Init+0x334>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <HAL_GPIO_Init+0x334>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001318:	4a12      	ldr	r2, [pc, #72]	; (8001364 <HAL_GPIO_Init+0x334>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3301      	adds	r3, #1
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	2b0f      	cmp	r3, #15
 8001328:	f67f ae90 	bls.w	800104c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40013800 	.word	0x40013800
 8001344:	40020000 	.word	0x40020000
 8001348:	40020400 	.word	0x40020400
 800134c:	40020800 	.word	0x40020800
 8001350:	40020c00 	.word	0x40020c00
 8001354:	40021000 	.word	0x40021000
 8001358:	40021400 	.word	0x40021400
 800135c:	40021800 	.word	0x40021800
 8001360:	40021c00 	.word	0x40021c00
 8001364:	40013c00 	.word	0x40013c00

08001368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137e:	887a      	ldrh	r2, [r7, #2]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001384:	e003      	b.n	800138e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	041a      	lsls	r2, r3, #16
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	619a      	str	r2, [r3, #24]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800139a:	b480      	push	{r7}
 800139c:	b085      	sub	sp, #20
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	460b      	mov	r3, r1
 80013a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013ac:	887a      	ldrh	r2, [r7, #2]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4013      	ands	r3, r2
 80013b2:	041a      	lsls	r2, r3, #16
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	887b      	ldrh	r3, [r7, #2]
 80013ba:	400b      	ands	r3, r1
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	619a      	str	r2, [r3, #24]
}
 80013c2:	bf00      	nop
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e267      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d075      	beq.n	80014da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ee:	4b88      	ldr	r3, [pc, #544]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	d00c      	beq.n	8001414 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013fa:	4b85      	ldr	r3, [pc, #532]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001402:	2b08      	cmp	r3, #8
 8001404:	d112      	bne.n	800142c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001406:	4b82      	ldr	r3, [pc, #520]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001412:	d10b      	bne.n	800142c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001414:	4b7e      	ldr	r3, [pc, #504]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d05b      	beq.n	80014d8 <HAL_RCC_OscConfig+0x108>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d157      	bne.n	80014d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e242      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001434:	d106      	bne.n	8001444 <HAL_RCC_OscConfig+0x74>
 8001436:	4b76      	ldr	r3, [pc, #472]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a75      	ldr	r2, [pc, #468]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e01d      	b.n	8001480 <HAL_RCC_OscConfig+0xb0>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0x98>
 800144e:	4b70      	ldr	r3, [pc, #448]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a6f      	ldr	r2, [pc, #444]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b6d      	ldr	r3, [pc, #436]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a6c      	ldr	r2, [pc, #432]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e00b      	b.n	8001480 <HAL_RCC_OscConfig+0xb0>
 8001468:	4b69      	ldr	r3, [pc, #420]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a68      	ldr	r2, [pc, #416]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800146e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b66      	ldr	r3, [pc, #408]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a65      	ldr	r2, [pc, #404]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800147a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d013      	beq.n	80014b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fce4 	bl	8000e54 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fce0 	bl	8000e54 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e207      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	4b5b      	ldr	r3, [pc, #364]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0xc0>
 80014ae:	e014      	b.n	80014da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fcd0 	bl	8000e54 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fccc 	bl	8000e54 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	; 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e1f3      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ca:	4b51      	ldr	r3, [pc, #324]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0xe8>
 80014d6:	e000      	b.n	80014da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d063      	beq.n	80015ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014e6:	4b4a      	ldr	r3, [pc, #296]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00b      	beq.n	800150a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014f2:	4b47      	ldr	r3, [pc, #284]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d11c      	bne.n	8001538 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014fe:	4b44      	ldr	r3, [pc, #272]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d116      	bne.n	8001538 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150a:	4b41      	ldr	r3, [pc, #260]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <HAL_RCC_OscConfig+0x152>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d001      	beq.n	8001522 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e1c7      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	4b3b      	ldr	r3, [pc, #236]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4937      	ldr	r1, [pc, #220]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001536:	e03a      	b.n	80015ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d020      	beq.n	8001582 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001540:	4b34      	ldr	r3, [pc, #208]	; (8001614 <HAL_RCC_OscConfig+0x244>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001546:	f7ff fc85 	bl	8000e54 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154e:	f7ff fc81 	bl	8000e54 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e1a8      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4925      	ldr	r1, [pc, #148]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
 8001580:	e015      	b.n	80015ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001582:	4b24      	ldr	r3, [pc, #144]	; (8001614 <HAL_RCC_OscConfig+0x244>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fc64 	bl	8000e54 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001590:	f7ff fc60 	bl	8000e54 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e187      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a2:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d036      	beq.n	8001628 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d016      	beq.n	80015f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_RCC_OscConfig+0x248>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff fc44 	bl	8000e54 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff fc40 	bl	8000e54 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e167      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80015e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x200>
 80015ee:	e01b      	b.n	8001628 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_RCC_OscConfig+0x248>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fc2d 	bl	8000e54 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015fc:	e00e      	b.n	800161c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fe:	f7ff fc29 	bl	8000e54 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d907      	bls.n	800161c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e150      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
 8001610:	40023800 	.word	0x40023800
 8001614:	42470000 	.word	0x42470000
 8001618:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800161c:	4b88      	ldr	r3, [pc, #544]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800161e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1ea      	bne.n	80015fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 8097 	beq.w	8001764 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800163a:	4b81      	ldr	r3, [pc, #516]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10f      	bne.n	8001666 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	4b7d      	ldr	r3, [pc, #500]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a7c      	ldr	r2, [pc, #496]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b7a      	ldr	r3, [pc, #488]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001662:	2301      	movs	r3, #1
 8001664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001666:	4b77      	ldr	r3, [pc, #476]	; (8001844 <HAL_RCC_OscConfig+0x474>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166e:	2b00      	cmp	r3, #0
 8001670:	d118      	bne.n	80016a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001672:	4b74      	ldr	r3, [pc, #464]	; (8001844 <HAL_RCC_OscConfig+0x474>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a73      	ldr	r2, [pc, #460]	; (8001844 <HAL_RCC_OscConfig+0x474>)
 8001678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800167e:	f7ff fbe9 	bl	8000e54 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001686:	f7ff fbe5 	bl	8000e54 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e10c      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001698:	4b6a      	ldr	r3, [pc, #424]	; (8001844 <HAL_RCC_OscConfig+0x474>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d106      	bne.n	80016ba <HAL_RCC_OscConfig+0x2ea>
 80016ac:	4b64      	ldr	r3, [pc, #400]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b0:	4a63      	ldr	r2, [pc, #396]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6713      	str	r3, [r2, #112]	; 0x70
 80016b8:	e01c      	b.n	80016f4 <HAL_RCC_OscConfig+0x324>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b05      	cmp	r3, #5
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0x30c>
 80016c2:	4b5f      	ldr	r3, [pc, #380]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c6:	4a5e      	ldr	r2, [pc, #376]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6713      	str	r3, [r2, #112]	; 0x70
 80016ce:	4b5c      	ldr	r3, [pc, #368]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d2:	4a5b      	ldr	r2, [pc, #364]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6713      	str	r3, [r2, #112]	; 0x70
 80016da:	e00b      	b.n	80016f4 <HAL_RCC_OscConfig+0x324>
 80016dc:	4b58      	ldr	r3, [pc, #352]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e0:	4a57      	ldr	r2, [pc, #348]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	6713      	str	r3, [r2, #112]	; 0x70
 80016e8:	4b55      	ldr	r3, [pc, #340]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ec:	4a54      	ldr	r2, [pc, #336]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016ee:	f023 0304 	bic.w	r3, r3, #4
 80016f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d015      	beq.n	8001728 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fc:	f7ff fbaa 	bl	8000e54 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001702:	e00a      	b.n	800171a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001704:	f7ff fba6 	bl	8000e54 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e0cb      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171a:	4b49      	ldr	r3, [pc, #292]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0ee      	beq.n	8001704 <HAL_RCC_OscConfig+0x334>
 8001726:	e014      	b.n	8001752 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001728:	f7ff fb94 	bl	8000e54 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172e:	e00a      	b.n	8001746 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001730:	f7ff fb90 	bl	8000e54 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	; 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e0b5      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001746:	4b3e      	ldr	r3, [pc, #248]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1ee      	bne.n	8001730 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d105      	bne.n	8001764 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001758:	4b39      	ldr	r3, [pc, #228]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	4a38      	ldr	r2, [pc, #224]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800175e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001762:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80a1 	beq.w	80018b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800176e:	4b34      	ldr	r3, [pc, #208]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b08      	cmp	r3, #8
 8001778:	d05c      	beq.n	8001834 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d141      	bne.n	8001806 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001782:	4b31      	ldr	r3, [pc, #196]	; (8001848 <HAL_RCC_OscConfig+0x478>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fb64 	bl	8000e54 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001790:	f7ff fb60 	bl	8000e54 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e087      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69da      	ldr	r2, [r3, #28]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	019b      	lsls	r3, r3, #6
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	085b      	lsrs	r3, r3, #1
 80017c6:	3b01      	subs	r3, #1
 80017c8:	041b      	lsls	r3, r3, #16
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	061b      	lsls	r3, r3, #24
 80017d2:	491b      	ldr	r1, [pc, #108]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <HAL_RCC_OscConfig+0x478>)
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7ff fb39 	bl	8000e54 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e6:	f7ff fb35 	bl	8000e54 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e05c      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x416>
 8001804:	e054      	b.n	80018b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_RCC_OscConfig+0x478>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fb22 	bl	8000e54 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff fb1e 	bl	8000e54 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e045      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x444>
 8001832:	e03d      	b.n	80018b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d107      	bne.n	800184c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e038      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
 8001840:	40023800 	.word	0x40023800
 8001844:	40007000 	.word	0x40007000
 8001848:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <HAL_RCC_OscConfig+0x4ec>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d028      	beq.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d121      	bne.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001872:	429a      	cmp	r2, r3
 8001874:	d11a      	bne.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800187c:	4013      	ands	r3, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001882:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001884:	4293      	cmp	r3, r2
 8001886:	d111      	bne.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001892:	085b      	lsrs	r3, r3, #1
 8001894:	3b01      	subs	r3, #1
 8001896:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d107      	bne.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800

080018c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0cc      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018d4:	4b68      	ldr	r3, [pc, #416]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d90c      	bls.n	80018fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b65      	ldr	r3, [pc, #404]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b63      	ldr	r3, [pc, #396]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0b8      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d020      	beq.n	800194a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001914:	4b59      	ldr	r3, [pc, #356]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4a58      	ldr	r2, [pc, #352]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800191e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800192c:	4b53      	ldr	r3, [pc, #332]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	4a52      	ldr	r2, [pc, #328]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001938:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	494d      	ldr	r1, [pc, #308]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d044      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	4b47      	ldr	r3, [pc, #284]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d119      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e07f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d003      	beq.n	800197e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197a:	2b03      	cmp	r3, #3
 800197c:	d107      	bne.n	800198e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197e:	4b3f      	ldr	r3, [pc, #252]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e06f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198e:	4b3b      	ldr	r3, [pc, #236]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e067      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800199e:	4b37      	ldr	r3, [pc, #220]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f023 0203 	bic.w	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4934      	ldr	r1, [pc, #208]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b0:	f7ff fa50 	bl	8000e54 <HAL_GetTick>
 80019b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b8:	f7ff fa4c 	bl	8000e54 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e04f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ce:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 020c 	and.w	r2, r3, #12
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	429a      	cmp	r2, r3
 80019de:	d1eb      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019e0:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d20c      	bcs.n	8001a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e032      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d008      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4916      	ldr	r1, [pc, #88]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d009      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	490e      	ldr	r1, [pc, #56]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a46:	f000 f821 	bl	8001a8c <HAL_RCC_GetSysClockFreq>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	490a      	ldr	r1, [pc, #40]	; (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	5ccb      	ldrb	r3, [r1, r3]
 8001a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f8b0 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	0800607c 	.word	0x0800607c
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000004 	.word	0x20000004

08001a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a90:	b094      	sub	sp, #80	; 0x50
 8001a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	647b      	str	r3, [r7, #68]	; 0x44
 8001a98:	2300      	movs	r3, #0
 8001a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aa4:	4b79      	ldr	r3, [pc, #484]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d00d      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x40>
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	f200 80e1 	bhi.w	8001c78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d003      	beq.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001abe:	e0db      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ac0:	4b73      	ldr	r3, [pc, #460]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ac2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ac4:	e0db      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ac6:	4b73      	ldr	r3, [pc, #460]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ac8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aca:	e0d8      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001acc:	4b6f      	ldr	r3, [pc, #444]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ad4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ad6:	4b6d      	ldr	r3, [pc, #436]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d063      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae2:	4b6a      	ldr	r3, [pc, #424]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	099b      	lsrs	r3, r3, #6
 8001ae8:	2200      	movs	r2, #0
 8001aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8001aec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001af4:	633b      	str	r3, [r7, #48]	; 0x30
 8001af6:	2300      	movs	r3, #0
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
 8001afa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001afe:	4622      	mov	r2, r4
 8001b00:	462b      	mov	r3, r5
 8001b02:	f04f 0000 	mov.w	r0, #0
 8001b06:	f04f 0100 	mov.w	r1, #0
 8001b0a:	0159      	lsls	r1, r3, #5
 8001b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b10:	0150      	lsls	r0, r2, #5
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4621      	mov	r1, r4
 8001b18:	1a51      	subs	r1, r2, r1
 8001b1a:	6139      	str	r1, [r7, #16]
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b30:	4659      	mov	r1, fp
 8001b32:	018b      	lsls	r3, r1, #6
 8001b34:	4651      	mov	r1, sl
 8001b36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b3a:	4651      	mov	r1, sl
 8001b3c:	018a      	lsls	r2, r1, #6
 8001b3e:	4651      	mov	r1, sl
 8001b40:	ebb2 0801 	subs.w	r8, r2, r1
 8001b44:	4659      	mov	r1, fp
 8001b46:	eb63 0901 	sbc.w	r9, r3, r1
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b5e:	4690      	mov	r8, r2
 8001b60:	4699      	mov	r9, r3
 8001b62:	4623      	mov	r3, r4
 8001b64:	eb18 0303 	adds.w	r3, r8, r3
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	462b      	mov	r3, r5
 8001b6c:	eb49 0303 	adc.w	r3, r9, r3
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b7e:	4629      	mov	r1, r5
 8001b80:	024b      	lsls	r3, r1, #9
 8001b82:	4621      	mov	r1, r4
 8001b84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b88:	4621      	mov	r1, r4
 8001b8a:	024a      	lsls	r2, r1, #9
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b92:	2200      	movs	r2, #0
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b9c:	f7fe fb70 	bl	8000280 <__aeabi_uldivmod>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ba8:	e058      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	099b      	lsrs	r3, r3, #6
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bba:	623b      	str	r3, [r7, #32]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bc4:	4642      	mov	r2, r8
 8001bc6:	464b      	mov	r3, r9
 8001bc8:	f04f 0000 	mov.w	r0, #0
 8001bcc:	f04f 0100 	mov.w	r1, #0
 8001bd0:	0159      	lsls	r1, r3, #5
 8001bd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bd6:	0150      	lsls	r0, r2, #5
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4641      	mov	r1, r8
 8001bde:	ebb2 0a01 	subs.w	sl, r2, r1
 8001be2:	4649      	mov	r1, r9
 8001be4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bfc:	ebb2 040a 	subs.w	r4, r2, sl
 8001c00:	eb63 050b 	sbc.w	r5, r3, fp
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	00eb      	lsls	r3, r5, #3
 8001c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c12:	00e2      	lsls	r2, r4, #3
 8001c14:	4614      	mov	r4, r2
 8001c16:	461d      	mov	r5, r3
 8001c18:	4643      	mov	r3, r8
 8001c1a:	18e3      	adds	r3, r4, r3
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	464b      	mov	r3, r9
 8001c20:	eb45 0303 	adc.w	r3, r5, r3
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c32:	4629      	mov	r1, r5
 8001c34:	028b      	lsls	r3, r1, #10
 8001c36:	4621      	mov	r1, r4
 8001c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	028a      	lsls	r2, r1, #10
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c46:	2200      	movs	r2, #0
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	61fa      	str	r2, [r7, #28]
 8001c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c50:	f7fe fb16 	bl	8000280 <__aeabi_uldivmod>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4613      	mov	r3, r2
 8001c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	3301      	adds	r3, #1
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c76:	e002      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3750      	adds	r7, #80	; 0x50
 8001c84:	46bd      	mov	sp, r7
 8001c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	00f42400 	.word	0x00f42400
 8001c94:	007a1200 	.word	0x007a1200

08001c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <HAL_RCC_GetHCLKFreq+0x14>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000000 	.word	0x20000000

08001cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cb4:	f7ff fff0 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	0a9b      	lsrs	r3, r3, #10
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	4903      	ldr	r1, [pc, #12]	; (8001cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc6:	5ccb      	ldrb	r3, [r1, r3]
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	0800608c 	.word	0x0800608c

08001cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cdc:	f7ff ffdc 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	0b5b      	lsrs	r3, r3, #13
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	4903      	ldr	r1, [pc, #12]	; (8001cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cee:	5ccb      	ldrb	r3, [r1, r3]
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	0800608c 	.word	0x0800608c

08001d00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0203 	and.w	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <HAL_RCC_GetClockConfig+0x60>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0207 	and.w	r2, r3, #7
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	601a      	str	r2, [r3, #0]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40023c00 	.word	0x40023c00

08001d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e041      	b.n	8001dfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d106      	bne.n	8001d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f839 	bl	8001e02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3304      	adds	r3, #4
 8001da0:	4619      	mov	r1, r3
 8001da2:	4610      	mov	r0, r2
 8001da4:	f000 f9d8 	bl	8002158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d001      	beq.n	8001e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e04e      	b.n	8001ece <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a23      	ldr	r2, [pc, #140]	; (8001edc <HAL_TIM_Base_Start_IT+0xc4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d022      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e5a:	d01d      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d018      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a1e      	ldr	r2, [pc, #120]	; (8001ee4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d013      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1c      	ldr	r2, [pc, #112]	; (8001ee8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00e      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1b      	ldr	r2, [pc, #108]	; (8001eec <HAL_TIM_Base_Start_IT+0xd4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d009      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a19      	ldr	r2, [pc, #100]	; (8001ef0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d004      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d111      	bne.n	8001ebc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d010      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eba:	e007      	b.n	8001ecc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	40000800 	.word	0x40000800
 8001ee8:	40000c00 	.word	0x40000c00
 8001eec:	40010400 	.word	0x40010400
 8001ef0:	40014000 	.word	0x40014000
 8001ef4:	40001800 	.word	0x40001800

08001ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d122      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d11b      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0202 	mvn.w	r2, #2
 8001f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f8ee 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 8001f40:	e005      	b.n	8001f4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8e0 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f8f1 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d122      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d11b      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0204 	mvn.w	r2, #4
 8001f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8c4 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 8001f94:	e005      	b.n	8001fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f8b6 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f8c7 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d122      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d11b      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0208 	mvn.w	r2, #8
 8001fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f89a 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 8001fe8:	e005      	b.n	8001ff6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f88c 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f89d 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b10      	cmp	r3, #16
 8002008:	d122      	bne.n	8002050 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	2b10      	cmp	r3, #16
 8002016:	d11b      	bne.n	8002050 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0210 	mvn.w	r2, #16
 8002020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2208      	movs	r2, #8
 8002026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f870 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 800203c:	e005      	b.n	800204a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f862 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f873 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b01      	cmp	r3, #1
 800205c:	d10e      	bne.n	800207c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d107      	bne.n	800207c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0201 	mvn.w	r2, #1
 8002074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe fd20 	bl	8000abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002086:	2b80      	cmp	r3, #128	; 0x80
 8002088:	d10e      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002094:	2b80      	cmp	r3, #128	; 0x80
 8002096:	d107      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f902 	bl	80022ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b2:	2b40      	cmp	r3, #64	; 0x40
 80020b4:	d10e      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c0:	2b40      	cmp	r3, #64	; 0x40
 80020c2:	d107      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f838 	bl	8002144 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b20      	cmp	r3, #32
 80020e0:	d10e      	bne.n	8002100 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b20      	cmp	r3, #32
 80020ee:	d107      	bne.n	8002100 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0220 	mvn.w	r2, #32
 80020f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f8cc 	bl	8002298 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a40      	ldr	r2, [pc, #256]	; (800226c <TIM_Base_SetConfig+0x114>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d013      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002176:	d00f      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a3d      	ldr	r2, [pc, #244]	; (8002270 <TIM_Base_SetConfig+0x118>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00b      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3c      	ldr	r2, [pc, #240]	; (8002274 <TIM_Base_SetConfig+0x11c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d007      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3b      	ldr	r2, [pc, #236]	; (8002278 <TIM_Base_SetConfig+0x120>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d003      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a3a      	ldr	r2, [pc, #232]	; (800227c <TIM_Base_SetConfig+0x124>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d108      	bne.n	80021aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a2f      	ldr	r2, [pc, #188]	; (800226c <TIM_Base_SetConfig+0x114>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d02b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b8:	d027      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2c      	ldr	r2, [pc, #176]	; (8002270 <TIM_Base_SetConfig+0x118>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d023      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2b      	ldr	r2, [pc, #172]	; (8002274 <TIM_Base_SetConfig+0x11c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d01f      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2a      	ldr	r2, [pc, #168]	; (8002278 <TIM_Base_SetConfig+0x120>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d01b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a29      	ldr	r2, [pc, #164]	; (800227c <TIM_Base_SetConfig+0x124>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d017      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a28      	ldr	r2, [pc, #160]	; (8002280 <TIM_Base_SetConfig+0x128>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a27      	ldr	r2, [pc, #156]	; (8002284 <TIM_Base_SetConfig+0x12c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00f      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a26      	ldr	r2, [pc, #152]	; (8002288 <TIM_Base_SetConfig+0x130>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a25      	ldr	r2, [pc, #148]	; (800228c <TIM_Base_SetConfig+0x134>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a24      	ldr	r2, [pc, #144]	; (8002290 <TIM_Base_SetConfig+0x138>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d003      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a23      	ldr	r2, [pc, #140]	; (8002294 <TIM_Base_SetConfig+0x13c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d108      	bne.n	800221c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <TIM_Base_SetConfig+0x114>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d003      	beq.n	8002250 <TIM_Base_SetConfig+0xf8>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a0c      	ldr	r2, [pc, #48]	; (800227c <TIM_Base_SetConfig+0x124>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d103      	bne.n	8002258 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	615a      	str	r2, [r3, #20]
}
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40010000 	.word	0x40010000
 8002270:	40000400 	.word	0x40000400
 8002274:	40000800 	.word	0x40000800
 8002278:	40000c00 	.word	0x40000c00
 800227c:	40010400 	.word	0x40010400
 8002280:	40014000 	.word	0x40014000
 8002284:	40014400 	.word	0x40014400
 8002288:	40014800 	.word	0x40014800
 800228c:	40001800 	.word	0x40001800
 8002290:	40001c00 	.word	0x40001c00
 8002294:	40002000 	.word	0x40002000

08002298 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e03f      	b.n	8002352 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d106      	bne.n	80022ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7fe fc28 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2224      	movs	r2, #36	; 0x24
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002302:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f929 	bl	800255c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002318:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695a      	ldr	r2, [r3, #20]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002328:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002338:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b08a      	sub	sp, #40	; 0x28
 800235e:	af02      	add	r7, sp, #8
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	4613      	mov	r3, r2
 8002368:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b20      	cmp	r3, #32
 8002378:	d17c      	bne.n	8002474 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <HAL_UART_Transmit+0x2c>
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e075      	b.n	8002476 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <HAL_UART_Transmit+0x3e>
 8002394:	2302      	movs	r3, #2
 8002396:	e06e      	b.n	8002476 <HAL_UART_Transmit+0x11c>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2221      	movs	r2, #33	; 0x21
 80023aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023ae:	f7fe fd51 	bl	8000e54 <HAL_GetTick>
 80023b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	88fa      	ldrh	r2, [r7, #6]
 80023b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	88fa      	ldrh	r2, [r7, #6]
 80023be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c8:	d108      	bne.n	80023dc <HAL_UART_Transmit+0x82>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d104      	bne.n	80023dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	e003      	b.n	80023e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023ec:	e02a      	b.n	8002444 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2200      	movs	r2, #0
 80023f6:	2180      	movs	r1, #128	; 0x80
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 f840 	bl	800247e <UART_WaitOnFlagUntilTimeout>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e036      	b.n	8002476 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10b      	bne.n	8002426 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800241c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	3302      	adds	r3, #2
 8002422:	61bb      	str	r3, [r7, #24]
 8002424:	e007      	b.n	8002436 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	781a      	ldrb	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	3301      	adds	r3, #1
 8002434:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1cf      	bne.n	80023ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2200      	movs	r2, #0
 8002456:	2140      	movs	r1, #64	; 0x40
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 f810 	bl	800247e <UART_WaitOnFlagUntilTimeout>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e006      	b.n	8002476 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	e000      	b.n	8002476 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002474:	2302      	movs	r3, #2
  }
}
 8002476:	4618      	mov	r0, r3
 8002478:	3720      	adds	r7, #32
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b090      	sub	sp, #64	; 0x40
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	4613      	mov	r3, r2
 800248c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800248e:	e050      	b.n	8002532 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002496:	d04c      	beq.n	8002532 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <UART_WaitOnFlagUntilTimeout+0x30>
 800249e:	f7fe fcd9 	bl	8000e54 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d241      	bcs.n	8002532 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	330c      	adds	r3, #12
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	e853 3f00 	ldrex	r3, [r3]
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	330c      	adds	r3, #12
 80024cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024ce:	637a      	str	r2, [r7, #52]	; 0x34
 80024d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024d6:	e841 2300 	strex	r3, r2, [r1]
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1e5      	bne.n	80024ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3314      	adds	r3, #20
 80024e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	e853 3f00 	ldrex	r3, [r3]
 80024f0:	613b      	str	r3, [r7, #16]
   return(result);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3314      	adds	r3, #20
 8002500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002502:	623a      	str	r2, [r7, #32]
 8002504:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002506:	69f9      	ldr	r1, [r7, #28]
 8002508:	6a3a      	ldr	r2, [r7, #32]
 800250a:	e841 2300 	strex	r3, r2, [r1]
 800250e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1e5      	bne.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2220      	movs	r2, #32
 8002522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e00f      	b.n	8002552 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4013      	ands	r3, r2
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	429a      	cmp	r2, r3
 8002540:	bf0c      	ite	eq
 8002542:	2301      	moveq	r3, #1
 8002544:	2300      	movne	r3, #0
 8002546:	b2db      	uxtb	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	429a      	cmp	r2, r3
 800254e:	d09f      	beq.n	8002490 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3740      	adds	r7, #64	; 0x40
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800255c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002560:	b0c0      	sub	sp, #256	; 0x100
 8002562:	af00      	add	r7, sp, #0
 8002564:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002578:	68d9      	ldr	r1, [r3, #12]
 800257a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	ea40 0301 	orr.w	r3, r0, r1
 8002584:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	431a      	orrs	r2, r3
 8002594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	431a      	orrs	r2, r3
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025b4:	f021 010c 	bic.w	r1, r1, #12
 80025b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80025c2:	430b      	orrs	r3, r1
 80025c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d6:	6999      	ldr	r1, [r3, #24]
 80025d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	ea40 0301 	orr.w	r3, r0, r1
 80025e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4b8f      	ldr	r3, [pc, #572]	; (8002828 <UART_SetConfig+0x2cc>)
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d005      	beq.n	80025fc <UART_SetConfig+0xa0>
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	4b8d      	ldr	r3, [pc, #564]	; (800282c <UART_SetConfig+0x2d0>)
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d104      	bne.n	8002606 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025fc:	f7ff fb6c 	bl	8001cd8 <HAL_RCC_GetPCLK2Freq>
 8002600:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002604:	e003      	b.n	800260e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002606:	f7ff fb53 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 800260a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800260e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002618:	f040 810c 	bne.w	8002834 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800261c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002620:	2200      	movs	r2, #0
 8002622:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002626:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800262a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800262e:	4622      	mov	r2, r4
 8002630:	462b      	mov	r3, r5
 8002632:	1891      	adds	r1, r2, r2
 8002634:	65b9      	str	r1, [r7, #88]	; 0x58
 8002636:	415b      	adcs	r3, r3
 8002638:	65fb      	str	r3, [r7, #92]	; 0x5c
 800263a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800263e:	4621      	mov	r1, r4
 8002640:	eb12 0801 	adds.w	r8, r2, r1
 8002644:	4629      	mov	r1, r5
 8002646:	eb43 0901 	adc.w	r9, r3, r1
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800265a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800265e:	4690      	mov	r8, r2
 8002660:	4699      	mov	r9, r3
 8002662:	4623      	mov	r3, r4
 8002664:	eb18 0303 	adds.w	r3, r8, r3
 8002668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800266c:	462b      	mov	r3, r5
 800266e:	eb49 0303 	adc.w	r3, r9, r3
 8002672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002682:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002686:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800268a:	460b      	mov	r3, r1
 800268c:	18db      	adds	r3, r3, r3
 800268e:	653b      	str	r3, [r7, #80]	; 0x50
 8002690:	4613      	mov	r3, r2
 8002692:	eb42 0303 	adc.w	r3, r2, r3
 8002696:	657b      	str	r3, [r7, #84]	; 0x54
 8002698:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800269c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80026a0:	f7fd fdee 	bl	8000280 <__aeabi_uldivmod>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4b61      	ldr	r3, [pc, #388]	; (8002830 <UART_SetConfig+0x2d4>)
 80026aa:	fba3 2302 	umull	r2, r3, r3, r2
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	011c      	lsls	r4, r3, #4
 80026b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026b6:	2200      	movs	r2, #0
 80026b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80026c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80026c4:	4642      	mov	r2, r8
 80026c6:	464b      	mov	r3, r9
 80026c8:	1891      	adds	r1, r2, r2
 80026ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80026cc:	415b      	adcs	r3, r3
 80026ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026d4:	4641      	mov	r1, r8
 80026d6:	eb12 0a01 	adds.w	sl, r2, r1
 80026da:	4649      	mov	r1, r9
 80026dc:	eb43 0b01 	adc.w	fp, r3, r1
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026f4:	4692      	mov	sl, r2
 80026f6:	469b      	mov	fp, r3
 80026f8:	4643      	mov	r3, r8
 80026fa:	eb1a 0303 	adds.w	r3, sl, r3
 80026fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002702:	464b      	mov	r3, r9
 8002704:	eb4b 0303 	adc.w	r3, fp, r3
 8002708:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800270c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002718:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800271c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002720:	460b      	mov	r3, r1
 8002722:	18db      	adds	r3, r3, r3
 8002724:	643b      	str	r3, [r7, #64]	; 0x40
 8002726:	4613      	mov	r3, r2
 8002728:	eb42 0303 	adc.w	r3, r2, r3
 800272c:	647b      	str	r3, [r7, #68]	; 0x44
 800272e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002732:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002736:	f7fd fda3 	bl	8000280 <__aeabi_uldivmod>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4611      	mov	r1, r2
 8002740:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <UART_SetConfig+0x2d4>)
 8002742:	fba3 2301 	umull	r2, r3, r3, r1
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	2264      	movs	r2, #100	; 0x64
 800274a:	fb02 f303 	mul.w	r3, r2, r3
 800274e:	1acb      	subs	r3, r1, r3
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002756:	4b36      	ldr	r3, [pc, #216]	; (8002830 <UART_SetConfig+0x2d4>)
 8002758:	fba3 2302 	umull	r2, r3, r3, r2
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002764:	441c      	add	r4, r3
 8002766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800276a:	2200      	movs	r2, #0
 800276c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002770:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002774:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002778:	4642      	mov	r2, r8
 800277a:	464b      	mov	r3, r9
 800277c:	1891      	adds	r1, r2, r2
 800277e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002780:	415b      	adcs	r3, r3
 8002782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002784:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002788:	4641      	mov	r1, r8
 800278a:	1851      	adds	r1, r2, r1
 800278c:	6339      	str	r1, [r7, #48]	; 0x30
 800278e:	4649      	mov	r1, r9
 8002790:	414b      	adcs	r3, r1
 8002792:	637b      	str	r3, [r7, #52]	; 0x34
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80027a0:	4659      	mov	r1, fp
 80027a2:	00cb      	lsls	r3, r1, #3
 80027a4:	4651      	mov	r1, sl
 80027a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027aa:	4651      	mov	r1, sl
 80027ac:	00ca      	lsls	r2, r1, #3
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	4642      	mov	r2, r8
 80027b6:	189b      	adds	r3, r3, r2
 80027b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027bc:	464b      	mov	r3, r9
 80027be:	460a      	mov	r2, r1
 80027c0:	eb42 0303 	adc.w	r3, r2, r3
 80027c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80027d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80027dc:	460b      	mov	r3, r1
 80027de:	18db      	adds	r3, r3, r3
 80027e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027e2:	4613      	mov	r3, r2
 80027e4:	eb42 0303 	adc.w	r3, r2, r3
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027f2:	f7fd fd45 	bl	8000280 <__aeabi_uldivmod>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <UART_SetConfig+0x2d4>)
 80027fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	2164      	movs	r1, #100	; 0x64
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	3332      	adds	r3, #50	; 0x32
 800280e:	4a08      	ldr	r2, [pc, #32]	; (8002830 <UART_SetConfig+0x2d4>)
 8002810:	fba2 2303 	umull	r2, r3, r2, r3
 8002814:	095b      	lsrs	r3, r3, #5
 8002816:	f003 0207 	and.w	r2, r3, #7
 800281a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4422      	add	r2, r4
 8002822:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002824:	e105      	b.n	8002a32 <UART_SetConfig+0x4d6>
 8002826:	bf00      	nop
 8002828:	40011000 	.word	0x40011000
 800282c:	40011400 	.word	0x40011400
 8002830:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002834:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002838:	2200      	movs	r2, #0
 800283a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800283e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002842:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002846:	4642      	mov	r2, r8
 8002848:	464b      	mov	r3, r9
 800284a:	1891      	adds	r1, r2, r2
 800284c:	6239      	str	r1, [r7, #32]
 800284e:	415b      	adcs	r3, r3
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
 8002852:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002856:	4641      	mov	r1, r8
 8002858:	1854      	adds	r4, r2, r1
 800285a:	4649      	mov	r1, r9
 800285c:	eb43 0501 	adc.w	r5, r3, r1
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	00eb      	lsls	r3, r5, #3
 800286a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800286e:	00e2      	lsls	r2, r4, #3
 8002870:	4614      	mov	r4, r2
 8002872:	461d      	mov	r5, r3
 8002874:	4643      	mov	r3, r8
 8002876:	18e3      	adds	r3, r4, r3
 8002878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800287c:	464b      	mov	r3, r9
 800287e:	eb45 0303 	adc.w	r3, r5, r3
 8002882:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002892:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80028a2:	4629      	mov	r1, r5
 80028a4:	008b      	lsls	r3, r1, #2
 80028a6:	4621      	mov	r1, r4
 80028a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028ac:	4621      	mov	r1, r4
 80028ae:	008a      	lsls	r2, r1, #2
 80028b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80028b4:	f7fd fce4 	bl	8000280 <__aeabi_uldivmod>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4b60      	ldr	r3, [pc, #384]	; (8002a40 <UART_SetConfig+0x4e4>)
 80028be:	fba3 2302 	umull	r2, r3, r3, r2
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	011c      	lsls	r4, r3, #4
 80028c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028ca:	2200      	movs	r2, #0
 80028cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80028d8:	4642      	mov	r2, r8
 80028da:	464b      	mov	r3, r9
 80028dc:	1891      	adds	r1, r2, r2
 80028de:	61b9      	str	r1, [r7, #24]
 80028e0:	415b      	adcs	r3, r3
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028e8:	4641      	mov	r1, r8
 80028ea:	1851      	adds	r1, r2, r1
 80028ec:	6139      	str	r1, [r7, #16]
 80028ee:	4649      	mov	r1, r9
 80028f0:	414b      	adcs	r3, r1
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002900:	4659      	mov	r1, fp
 8002902:	00cb      	lsls	r3, r1, #3
 8002904:	4651      	mov	r1, sl
 8002906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800290a:	4651      	mov	r1, sl
 800290c:	00ca      	lsls	r2, r1, #3
 800290e:	4610      	mov	r0, r2
 8002910:	4619      	mov	r1, r3
 8002912:	4603      	mov	r3, r0
 8002914:	4642      	mov	r2, r8
 8002916:	189b      	adds	r3, r3, r2
 8002918:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800291c:	464b      	mov	r3, r9
 800291e:	460a      	mov	r2, r1
 8002920:	eb42 0303 	adc.w	r3, r2, r3
 8002924:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	67bb      	str	r3, [r7, #120]	; 0x78
 8002932:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002940:	4649      	mov	r1, r9
 8002942:	008b      	lsls	r3, r1, #2
 8002944:	4641      	mov	r1, r8
 8002946:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800294a:	4641      	mov	r1, r8
 800294c:	008a      	lsls	r2, r1, #2
 800294e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002952:	f7fd fc95 	bl	8000280 <__aeabi_uldivmod>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <UART_SetConfig+0x4e4>)
 800295c:	fba3 1302 	umull	r1, r3, r3, r2
 8002960:	095b      	lsrs	r3, r3, #5
 8002962:	2164      	movs	r1, #100	; 0x64
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	3332      	adds	r3, #50	; 0x32
 800296e:	4a34      	ldr	r2, [pc, #208]	; (8002a40 <UART_SetConfig+0x4e4>)
 8002970:	fba2 2303 	umull	r2, r3, r2, r3
 8002974:	095b      	lsrs	r3, r3, #5
 8002976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800297a:	441c      	add	r4, r3
 800297c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002980:	2200      	movs	r2, #0
 8002982:	673b      	str	r3, [r7, #112]	; 0x70
 8002984:	677a      	str	r2, [r7, #116]	; 0x74
 8002986:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800298a:	4642      	mov	r2, r8
 800298c:	464b      	mov	r3, r9
 800298e:	1891      	adds	r1, r2, r2
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	415b      	adcs	r3, r3
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800299a:	4641      	mov	r1, r8
 800299c:	1851      	adds	r1, r2, r1
 800299e:	6039      	str	r1, [r7, #0]
 80029a0:	4649      	mov	r1, r9
 80029a2:	414b      	adcs	r3, r1
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029b2:	4659      	mov	r1, fp
 80029b4:	00cb      	lsls	r3, r1, #3
 80029b6:	4651      	mov	r1, sl
 80029b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029bc:	4651      	mov	r1, sl
 80029be:	00ca      	lsls	r2, r1, #3
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	4603      	mov	r3, r0
 80029c6:	4642      	mov	r2, r8
 80029c8:	189b      	adds	r3, r3, r2
 80029ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80029cc:	464b      	mov	r3, r9
 80029ce:	460a      	mov	r2, r1
 80029d0:	eb42 0303 	adc.w	r3, r2, r3
 80029d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	663b      	str	r3, [r7, #96]	; 0x60
 80029e0:	667a      	str	r2, [r7, #100]	; 0x64
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029ee:	4649      	mov	r1, r9
 80029f0:	008b      	lsls	r3, r1, #2
 80029f2:	4641      	mov	r1, r8
 80029f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029f8:	4641      	mov	r1, r8
 80029fa:	008a      	lsls	r2, r1, #2
 80029fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a00:	f7fd fc3e 	bl	8000280 <__aeabi_uldivmod>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <UART_SetConfig+0x4e4>)
 8002a0a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	2164      	movs	r1, #100	; 0x64
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	3332      	adds	r3, #50	; 0x32
 8002a1c:	4a08      	ldr	r2, [pc, #32]	; (8002a40 <UART_SetConfig+0x4e4>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	f003 020f 	and.w	r2, r3, #15
 8002a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4422      	add	r2, r4
 8002a30:	609a      	str	r2, [r3, #8]
}
 8002a32:	bf00      	nop
 8002a34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a3e:	bf00      	nop
 8002a40:	51eb851f 	.word	0x51eb851f

08002a44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f103 0208 	add.w	r2, r3, #8
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f04f 32ff 	mov.w	r2, #4294967295
 8002a5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f103 0208 	add.w	r2, r3, #8
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f103 0208 	add.w	r2, r3, #8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	601a      	str	r2, [r3, #0]
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b085      	sub	sp, #20
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afc:	d103      	bne.n	8002b06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	e00c      	b.n	8002b20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3308      	adds	r3, #8
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	e002      	b.n	8002b14 <vListInsert+0x2e>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d2f6      	bcs.n	8002b0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	601a      	str	r2, [r3, #0]
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6892      	ldr	r2, [r2, #8]
 8002b6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6852      	ldr	r2, [r2, #4]
 8002b78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d103      	bne.n	8002b8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	1e5a      	subs	r2, r3, #1
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10a      	bne.n	8002bd6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002bd2:	bf00      	nop
 8002bd4:	e7fe      	b.n	8002bd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002bd6:	f002 fa1d 	bl	8005014 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be2:	68f9      	ldr	r1, [r7, #12]
 8002be4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	441a      	add	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c06:	3b01      	subs	r3, #1
 8002c08:	68f9      	ldr	r1, [r7, #12]
 8002c0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	441a      	add	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	22ff      	movs	r2, #255	; 0xff
 8002c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	22ff      	movs	r2, #255	; 0xff
 8002c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d114      	bne.n	8002c56 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d01a      	beq.n	8002c6a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3310      	adds	r3, #16
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f001 f841 	bl	8003cc0 <xTaskRemoveFromEventList>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d012      	beq.n	8002c6a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c44:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <xQueueGenericReset+0xcc>)
 8002c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	e009      	b.n	8002c6a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3310      	adds	r3, #16
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fef2 	bl	8002a44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3324      	adds	r3, #36	; 0x24
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff feed 	bl	8002a44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c6a:	f002 fa03 	bl	8005074 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c6e:	2301      	movs	r3, #1
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	e000ed04 	.word	0xe000ed04

08002c7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	; 0x28
 8002c80:	af02      	add	r7, sp, #8
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	4613      	mov	r3, r2
 8002c88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10a      	bne.n	8002ca6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c94:	f383 8811 	msr	BASEPRI, r3
 8002c98:	f3bf 8f6f 	isb	sy
 8002c9c:	f3bf 8f4f 	dsb	sy
 8002ca0:	613b      	str	r3, [r7, #16]
}
 8002ca2:	bf00      	nop
 8002ca4:	e7fe      	b.n	8002ca4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61fb      	str	r3, [r7, #28]
 8002cb0:	e004      	b.n	8002cbc <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	fb02 f303 	mul.w	r3, r2, r3
 8002cba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	3350      	adds	r3, #80	; 0x50
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f002 fac9 	bl	8005258 <pvPortMalloc>
 8002cc6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00d      	beq.n	8002cea <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	3350      	adds	r3, #80	; 0x50
 8002cd6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cd8:	79fa      	ldrb	r2, [r7, #7]
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f805 	bl	8002cf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cea:	69bb      	ldr	r3, [r7, #24]
	}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3720      	adds	r7, #32
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d103      	bne.n	8002d10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	e002      	b.n	8002d16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d22:	2101      	movs	r1, #1
 8002d24:	69b8      	ldr	r0, [r7, #24]
 8002d26:	f7ff ff41 	bl	8002bac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08e      	sub	sp, #56	; 0x38
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10a      	bne.n	8002d6e <xQueueGenericSend+0x32>
	__asm volatile
 8002d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d6a:	bf00      	nop
 8002d6c:	e7fe      	b.n	8002d6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d103      	bne.n	8002d7c <xQueueGenericSend+0x40>
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <xQueueGenericSend+0x44>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <xQueueGenericSend+0x46>
 8002d80:	2300      	movs	r3, #0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10a      	bne.n	8002d9c <xQueueGenericSend+0x60>
	__asm volatile
 8002d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8a:	f383 8811 	msr	BASEPRI, r3
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d98:	bf00      	nop
 8002d9a:	e7fe      	b.n	8002d9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d103      	bne.n	8002daa <xQueueGenericSend+0x6e>
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <xQueueGenericSend+0x72>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <xQueueGenericSend+0x74>
 8002dae:	2300      	movs	r3, #0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <xQueueGenericSend+0x8e>
	__asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	623b      	str	r3, [r7, #32]
}
 8002dc6:	bf00      	nop
 8002dc8:	e7fe      	b.n	8002dc8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dca:	f001 f917 	bl	8003ffc <xTaskGetSchedulerState>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <xQueueGenericSend+0x9e>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <xQueueGenericSend+0xa2>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <xQueueGenericSend+0xa4>
 8002dde:	2300      	movs	r3, #0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <xQueueGenericSend+0xbe>
	__asm volatile
 8002de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	61fb      	str	r3, [r7, #28]
}
 8002df6:	bf00      	nop
 8002df8:	e7fe      	b.n	8002df8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dfa:	f002 f90b 	bl	8005014 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d302      	bcc.n	8002e10 <xQueueGenericSend+0xd4>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d129      	bne.n	8002e64 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e16:	f000 fa07 	bl	8003228 <prvCopyDataToQueue>
 8002e1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d010      	beq.n	8002e46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e26:	3324      	adds	r3, #36	; 0x24
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 ff49 	bl	8003cc0 <xTaskRemoveFromEventList>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d013      	beq.n	8002e5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e34:	4b3f      	ldr	r3, [pc, #252]	; (8002f34 <xQueueGenericSend+0x1f8>)
 8002e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	e00a      	b.n	8002e5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d007      	beq.n	8002e5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e4c:	4b39      	ldr	r3, [pc, #228]	; (8002f34 <xQueueGenericSend+0x1f8>)
 8002e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e5c:	f002 f90a 	bl	8005074 <vPortExitCritical>
				return pdPASS;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e063      	b.n	8002f2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d103      	bne.n	8002e72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e6a:	f002 f903 	bl	8005074 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e05c      	b.n	8002f2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d106      	bne.n	8002e86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 ff81 	bl	8003d84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e82:	2301      	movs	r3, #1
 8002e84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e86:	f002 f8f5 	bl	8005074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e8a:	f000 fcfb 	bl	8003884 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e8e:	f002 f8c1 	bl	8005014 <vPortEnterCritical>
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e98:	b25b      	sxtb	r3, r3
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d103      	bne.n	8002ea8 <xQueueGenericSend+0x16c>
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eae:	b25b      	sxtb	r3, r3
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d103      	bne.n	8002ebe <xQueueGenericSend+0x182>
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ebe:	f002 f8d9 	bl	8005074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ec2:	1d3a      	adds	r2, r7, #4
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 ff70 	bl	8003db0 <xTaskCheckForTimeOut>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d124      	bne.n	8002f20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ed6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ed8:	f000 fa9e 	bl	8003418 <prvIsQueueFull>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d018      	beq.n	8002f14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	3310      	adds	r3, #16
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fe98 	bl	8003c20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ef2:	f000 fa29 	bl	8003348 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ef6:	f000 fcd3 	bl	80038a0 <xTaskResumeAll>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f47f af7c 	bne.w	8002dfa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <xQueueGenericSend+0x1f8>)
 8002f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	e772      	b.n	8002dfa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f16:	f000 fa17 	bl	8003348 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f1a:	f000 fcc1 	bl	80038a0 <xTaskResumeAll>
 8002f1e:	e76c      	b.n	8002dfa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f22:	f000 fa11 	bl	8003348 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f26:	f000 fcbb 	bl	80038a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3738      	adds	r7, #56	; 0x38
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	e000ed04 	.word	0xe000ed04

08002f38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08e      	sub	sp, #56	; 0x38
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10a      	bne.n	8002f66 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f62:	bf00      	nop
 8002f64:	e7fe      	b.n	8002f64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d103      	bne.n	8002f74 <xQueueGenericSendFromISR+0x3c>
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <xQueueGenericSendFromISR+0x40>
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <xQueueGenericSendFromISR+0x42>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	623b      	str	r3, [r7, #32]
}
 8002f90:	bf00      	nop
 8002f92:	e7fe      	b.n	8002f92 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d103      	bne.n	8002fa2 <xQueueGenericSendFromISR+0x6a>
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <xQueueGenericSendFromISR+0x6e>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <xQueueGenericSendFromISR+0x70>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	61fb      	str	r3, [r7, #28]
}
 8002fbe:	bf00      	nop
 8002fc0:	e7fe      	b.n	8002fc0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fc2:	f002 f909 	bl	80051d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fc6:	f3ef 8211 	mrs	r2, BASEPRI
 8002fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	61ba      	str	r2, [r7, #24]
 8002fdc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fde:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d302      	bcc.n	8002ff4 <xQueueGenericSendFromISR+0xbc>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d12c      	bne.n	800304e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	68b9      	ldr	r1, [r7, #8]
 8003002:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003004:	f000 f910 	bl	8003228 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003008:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003010:	d112      	bne.n	8003038 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	2b00      	cmp	r3, #0
 8003018:	d016      	beq.n	8003048 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301c:	3324      	adds	r3, #36	; 0x24
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fe4e 	bl	8003cc0 <xTaskRemoveFromEventList>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00e      	beq.n	8003048 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00b      	beq.n	8003048 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	e007      	b.n	8003048 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003038:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800303c:	3301      	adds	r3, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	b25a      	sxtb	r2, r3
 8003042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003048:	2301      	movs	r3, #1
 800304a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800304c:	e001      	b.n	8003052 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800304e:	2300      	movs	r3, #0
 8003050:	637b      	str	r3, [r7, #52]	; 0x34
 8003052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003054:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800305c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800305e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003060:	4618      	mov	r0, r3
 8003062:	3738      	adds	r7, #56	; 0x38
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08c      	sub	sp, #48	; 0x30
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003074:	2300      	movs	r3, #0
 8003076:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10a      	bne.n	8003098 <xQueueReceive+0x30>
	__asm volatile
 8003082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003086:	f383 8811 	msr	BASEPRI, r3
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	623b      	str	r3, [r7, #32]
}
 8003094:	bf00      	nop
 8003096:	e7fe      	b.n	8003096 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d103      	bne.n	80030a6 <xQueueReceive+0x3e>
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <xQueueReceive+0x42>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <xQueueReceive+0x44>
 80030aa:	2300      	movs	r3, #0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10a      	bne.n	80030c6 <xQueueReceive+0x5e>
	__asm volatile
 80030b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	61fb      	str	r3, [r7, #28]
}
 80030c2:	bf00      	nop
 80030c4:	e7fe      	b.n	80030c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030c6:	f000 ff99 	bl	8003ffc <xTaskGetSchedulerState>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d102      	bne.n	80030d6 <xQueueReceive+0x6e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <xQueueReceive+0x72>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <xQueueReceive+0x74>
 80030da:	2300      	movs	r3, #0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <xQueueReceive+0x8e>
	__asm volatile
 80030e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	61bb      	str	r3, [r7, #24]
}
 80030f2:	bf00      	nop
 80030f4:	e7fe      	b.n	80030f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030f6:	f001 ff8d 	bl	8005014 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	2b00      	cmp	r3, #0
 8003104:	d01f      	beq.n	8003146 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003106:	68b9      	ldr	r1, [r7, #8]
 8003108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800310a:	f000 f8f7 	bl	80032fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	1e5a      	subs	r2, r3, #1
 8003112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003114:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00f      	beq.n	800313e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	3310      	adds	r3, #16
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fdcc 	bl	8003cc0 <xTaskRemoveFromEventList>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800312e:	4b3d      	ldr	r3, [pc, #244]	; (8003224 <xQueueReceive+0x1bc>)
 8003130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	f3bf 8f4f 	dsb	sy
 800313a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800313e:	f001 ff99 	bl	8005074 <vPortExitCritical>
				return pdPASS;
 8003142:	2301      	movs	r3, #1
 8003144:	e069      	b.n	800321a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d103      	bne.n	8003154 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800314c:	f001 ff92 	bl	8005074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003150:	2300      	movs	r3, #0
 8003152:	e062      	b.n	800321a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800315a:	f107 0310 	add.w	r3, r7, #16
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fe10 	bl	8003d84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003164:	2301      	movs	r3, #1
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003168:	f001 ff84 	bl	8005074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800316c:	f000 fb8a 	bl	8003884 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003170:	f001 ff50 	bl	8005014 <vPortEnterCritical>
 8003174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003176:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800317a:	b25b      	sxtb	r3, r3
 800317c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003180:	d103      	bne.n	800318a <xQueueReceive+0x122>
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003190:	b25b      	sxtb	r3, r3
 8003192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003196:	d103      	bne.n	80031a0 <xQueueReceive+0x138>
 8003198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031a0:	f001 ff68 	bl	8005074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031a4:	1d3a      	adds	r2, r7, #4
 80031a6:	f107 0310 	add.w	r3, r7, #16
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fdff 	bl	8003db0 <xTaskCheckForTimeOut>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d123      	bne.n	8003200 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ba:	f000 f917 	bl	80033ec <prvIsQueueEmpty>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d017      	beq.n	80031f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c6:	3324      	adds	r3, #36	; 0x24
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 fd27 	bl	8003c20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031d4:	f000 f8b8 	bl	8003348 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031d8:	f000 fb62 	bl	80038a0 <xTaskResumeAll>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d189      	bne.n	80030f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80031e2:	4b10      	ldr	r3, [pc, #64]	; (8003224 <xQueueReceive+0x1bc>)
 80031e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	e780      	b.n	80030f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031f6:	f000 f8a7 	bl	8003348 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031fa:	f000 fb51 	bl	80038a0 <xTaskResumeAll>
 80031fe:	e77a      	b.n	80030f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003202:	f000 f8a1 	bl	8003348 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003206:	f000 fb4b 	bl	80038a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800320a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800320c:	f000 f8ee 	bl	80033ec <prvIsQueueEmpty>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	f43f af6f 	beq.w	80030f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003218:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800321a:	4618      	mov	r0, r3
 800321c:	3730      	adds	r7, #48	; 0x30
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	e000ed04 	.word	0xe000ed04

08003228 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10d      	bne.n	8003262 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d14d      	bne.n	80032ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fef0 	bl	8004038 <xTaskPriorityDisinherit>
 8003258:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	e043      	b.n	80032ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d119      	bne.n	800329c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6858      	ldr	r0, [r3, #4]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	461a      	mov	r2, r3
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	f002 f9f4 	bl	8005660 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	441a      	add	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	429a      	cmp	r2, r3
 8003290:	d32b      	bcc.n	80032ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	e026      	b.n	80032ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68d8      	ldr	r0, [r3, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	461a      	mov	r2, r3
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	f002 f9da 	bl	8005660 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	425b      	negs	r3, r3
 80032b6:	441a      	add	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d207      	bcs.n	80032d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	425b      	negs	r3, r3
 80032d2:	441a      	add	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d105      	bne.n	80032ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032f2:	697b      	ldr	r3, [r7, #20]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	d018      	beq.n	8003340 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	441a      	add	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	429a      	cmp	r2, r3
 8003326:	d303      	bcc.n	8003330 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68d9      	ldr	r1, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	461a      	mov	r2, r3
 800333a:	6838      	ldr	r0, [r7, #0]
 800333c:	f002 f990 	bl	8005660 <memcpy>
	}
}
 8003340:	bf00      	nop
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003350:	f001 fe60 	bl	8005014 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800335a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800335c:	e011      	b.n	8003382 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	2b00      	cmp	r3, #0
 8003364:	d012      	beq.n	800338c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3324      	adds	r3, #36	; 0x24
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fca8 	bl	8003cc0 <xTaskRemoveFromEventList>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003376:	f000 fd7d 	bl	8003e74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	3b01      	subs	r3, #1
 800337e:	b2db      	uxtb	r3, r3
 8003380:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003386:	2b00      	cmp	r3, #0
 8003388:	dce9      	bgt.n	800335e <prvUnlockQueue+0x16>
 800338a:	e000      	b.n	800338e <prvUnlockQueue+0x46>
					break;
 800338c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	22ff      	movs	r2, #255	; 0xff
 8003392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003396:	f001 fe6d 	bl	8005074 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800339a:	f001 fe3b 	bl	8005014 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033a6:	e011      	b.n	80033cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d012      	beq.n	80033d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3310      	adds	r3, #16
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fc83 	bl	8003cc0 <xTaskRemoveFromEventList>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033c0:	f000 fd58 	bl	8003e74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033c4:	7bbb      	ldrb	r3, [r7, #14]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	dce9      	bgt.n	80033a8 <prvUnlockQueue+0x60>
 80033d4:	e000      	b.n	80033d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	22ff      	movs	r2, #255	; 0xff
 80033dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80033e0:	f001 fe48 	bl	8005074 <vPortExitCritical>
}
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033f4:	f001 fe0e 	bl	8005014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d102      	bne.n	8003406 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003400:	2301      	movs	r3, #1
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	e001      	b.n	800340a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800340a:	f001 fe33 	bl	8005074 <vPortExitCritical>

	return xReturn;
 800340e:	68fb      	ldr	r3, [r7, #12]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003420:	f001 fdf8 	bl	8005014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342c:	429a      	cmp	r2, r3
 800342e:	d102      	bne.n	8003436 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003430:	2301      	movs	r3, #1
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	e001      	b.n	800343a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800343a:	f001 fe1b 	bl	8005074 <vPortExitCritical>

	return xReturn;
 800343e:	68fb      	ldr	r3, [r7, #12]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	e014      	b.n	8003482 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003458:	4a0f      	ldr	r2, [pc, #60]	; (8003498 <vQueueAddToRegistry+0x50>)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10b      	bne.n	800347c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003464:	490c      	ldr	r1, [pc, #48]	; (8003498 <vQueueAddToRegistry+0x50>)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800346e:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <vQueueAddToRegistry+0x50>)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800347a:	e006      	b.n	800348a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3301      	adds	r3, #1
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b07      	cmp	r3, #7
 8003486:	d9e7      	bls.n	8003458 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003488:	bf00      	nop
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	20000128 	.word	0x20000128

0800349c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80034ac:	f001 fdb2 	bl	8005014 <vPortEnterCritical>
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034b6:	b25b      	sxtb	r3, r3
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d103      	bne.n	80034c6 <vQueueWaitForMessageRestricted+0x2a>
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034cc:	b25b      	sxtb	r3, r3
 80034ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d2:	d103      	bne.n	80034dc <vQueueWaitForMessageRestricted+0x40>
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034dc:	f001 fdca 	bl	8005074 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d106      	bne.n	80034f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	3324      	adds	r3, #36	; 0x24
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fbb9 	bl	8003c68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034f6:	6978      	ldr	r0, [r7, #20]
 80034f8:	f7ff ff26 	bl	8003348 <prvUnlockQueue>
	}
 80034fc:	bf00      	nop
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08c      	sub	sp, #48	; 0x30
 8003508:	af04      	add	r7, sp, #16
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	4613      	mov	r3, r2
 8003512:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4618      	mov	r0, r3
 800351a:	f001 fe9d 	bl	8005258 <pvPortMalloc>
 800351e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00e      	beq.n	8003544 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003526:	2058      	movs	r0, #88	; 0x58
 8003528:	f001 fe96 	bl	8005258 <pvPortMalloc>
 800352c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	631a      	str	r2, [r3, #48]	; 0x30
 800353a:	e005      	b.n	8003548 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800353c:	6978      	ldr	r0, [r7, #20]
 800353e:	f001 ff4f 	bl	80053e0 <vPortFree>
 8003542:	e001      	b.n	8003548 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d013      	beq.n	8003576 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800354e:	88fa      	ldrh	r2, [r7, #6]
 8003550:	2300      	movs	r3, #0
 8003552:	9303      	str	r3, [sp, #12]
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	9302      	str	r3, [sp, #8]
 8003558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f80e 	bl	8003586 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800356a:	69f8      	ldr	r0, [r7, #28]
 800356c:	f000 f89a 	bl	80036a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003570:	2301      	movs	r3, #1
 8003572:	61bb      	str	r3, [r7, #24]
 8003574:	e002      	b.n	800357c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003576:	f04f 33ff 	mov.w	r3, #4294967295
 800357a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800357c:	69bb      	ldr	r3, [r7, #24]
	}
 800357e:	4618      	mov	r0, r3
 8003580:	3720      	adds	r7, #32
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b088      	sub	sp, #32
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	461a      	mov	r2, r3
 800359e:	21a5      	movs	r1, #165	; 0xa5
 80035a0:	f002 f86c 	bl	800567c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035ae:	3b01      	subs	r3, #1
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	f023 0307 	bic.w	r3, r3, #7
 80035bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <prvInitialiseNewTask+0x58>
	__asm volatile
 80035c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035cc:	f383 8811 	msr	BASEPRI, r3
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	617b      	str	r3, [r7, #20]
}
 80035da:	bf00      	nop
 80035dc:	e7fe      	b.n	80035dc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01f      	beq.n	8003624 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035e4:	2300      	movs	r3, #0
 80035e6:	61fb      	str	r3, [r7, #28]
 80035e8:	e012      	b.n	8003610 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	4413      	add	r3, r2
 80035f0:	7819      	ldrb	r1, [r3, #0]
 80035f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	4413      	add	r3, r2
 80035f8:	3334      	adds	r3, #52	; 0x34
 80035fa:	460a      	mov	r2, r1
 80035fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	4413      	add	r3, r2
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d006      	beq.n	8003618 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3301      	adds	r3, #1
 800360e:	61fb      	str	r3, [r7, #28]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2b09      	cmp	r3, #9
 8003614:	d9e9      	bls.n	80035ea <prvInitialiseNewTask+0x64>
 8003616:	e000      	b.n	800361a <prvInitialiseNewTask+0x94>
			{
				break;
 8003618:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003622:	e003      	b.n	800362c <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362e:	2b0e      	cmp	r3, #14
 8003630:	d901      	bls.n	8003636 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003632:	230e      	movs	r3, #14
 8003634:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800363a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003640:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003644:	2200      	movs	r2, #0
 8003646:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	3304      	adds	r3, #4
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff fa19 	bl	8002a84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	3318      	adds	r3, #24
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff fa14 	bl	8002a84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003660:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003664:	f1c3 020f 	rsb	r2, r3, #15
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003670:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	2200      	movs	r2, #0
 8003676:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	68f9      	ldr	r1, [r7, #12]
 8003684:	69b8      	ldr	r0, [r7, #24]
 8003686:	f001 fb89 	bl	8004d9c <pxPortInitialiseStack>
 800368a:	4602      	mov	r2, r0
 800368c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800369a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800369c:	bf00      	nop
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036ac:	f001 fcb2 	bl	8005014 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80036b0:	4b2c      	ldr	r3, [pc, #176]	; (8003764 <prvAddNewTaskToReadyList+0xc0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3301      	adds	r3, #1
 80036b6:	4a2b      	ldr	r2, [pc, #172]	; (8003764 <prvAddNewTaskToReadyList+0xc0>)
 80036b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80036ba:	4b2b      	ldr	r3, [pc, #172]	; (8003768 <prvAddNewTaskToReadyList+0xc4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036c2:	4a29      	ldr	r2, [pc, #164]	; (8003768 <prvAddNewTaskToReadyList+0xc4>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036c8:	4b26      	ldr	r3, [pc, #152]	; (8003764 <prvAddNewTaskToReadyList+0xc0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d110      	bne.n	80036f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036d0:	f000 fbf6 	bl	8003ec0 <prvInitialiseTaskLists>
 80036d4:	e00d      	b.n	80036f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036d6:	4b25      	ldr	r3, [pc, #148]	; (800376c <prvAddNewTaskToReadyList+0xc8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036de:	4b22      	ldr	r3, [pc, #136]	; (8003768 <prvAddNewTaskToReadyList+0xc4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d802      	bhi.n	80036f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036ec:	4a1e      	ldr	r2, [pc, #120]	; (8003768 <prvAddNewTaskToReadyList+0xc4>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036f2:	4b1f      	ldr	r3, [pc, #124]	; (8003770 <prvAddNewTaskToReadyList+0xcc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3301      	adds	r3, #1
 80036f8:	4a1d      	ldr	r2, [pc, #116]	; (8003770 <prvAddNewTaskToReadyList+0xcc>)
 80036fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036fc:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <prvAddNewTaskToReadyList+0xcc>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	2201      	movs	r2, #1
 800370a:	409a      	lsls	r2, r3
 800370c:	4b19      	ldr	r3, [pc, #100]	; (8003774 <prvAddNewTaskToReadyList+0xd0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4313      	orrs	r3, r2
 8003712:	4a18      	ldr	r2, [pc, #96]	; (8003774 <prvAddNewTaskToReadyList+0xd0>)
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4a15      	ldr	r2, [pc, #84]	; (8003778 <prvAddNewTaskToReadyList+0xd4>)
 8003724:	441a      	add	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3304      	adds	r3, #4
 800372a:	4619      	mov	r1, r3
 800372c:	4610      	mov	r0, r2
 800372e:	f7ff f9b6 	bl	8002a9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003732:	f001 fc9f 	bl	8005074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003736:	4b0d      	ldr	r3, [pc, #52]	; (800376c <prvAddNewTaskToReadyList+0xc8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00e      	beq.n	800375c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800373e:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <prvAddNewTaskToReadyList+0xc4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	429a      	cmp	r2, r3
 800374a:	d207      	bcs.n	800375c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <prvAddNewTaskToReadyList+0xd8>)
 800374e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000308 	.word	0x20000308
 8003768:	20000168 	.word	0x20000168
 800376c:	20000314 	.word	0x20000314
 8003770:	20000324 	.word	0x20000324
 8003774:	20000310 	.word	0x20000310
 8003778:	2000016c 	.word	0x2000016c
 800377c:	e000ed04 	.word	0xe000ed04

08003780 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d017      	beq.n	80037c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003792:	4b13      	ldr	r3, [pc, #76]	; (80037e0 <vTaskDelay+0x60>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <vTaskDelay+0x30>
	__asm volatile
 800379a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	60bb      	str	r3, [r7, #8]
}
 80037ac:	bf00      	nop
 80037ae:	e7fe      	b.n	80037ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80037b0:	f000 f868 	bl	8003884 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037b4:	2100      	movs	r1, #0
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fcc4 	bl	8004144 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037bc:	f000 f870 	bl	80038a0 <xTaskResumeAll>
 80037c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d107      	bne.n	80037d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80037c8:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <vTaskDelay+0x64>)
 80037ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20000330 	.word	0x20000330
 80037e4:	e000ed04 	.word	0xe000ed04

080037e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80037ee:	4b1f      	ldr	r3, [pc, #124]	; (800386c <vTaskStartScheduler+0x84>)
 80037f0:	9301      	str	r3, [sp, #4]
 80037f2:	2300      	movs	r3, #0
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	2300      	movs	r3, #0
 80037f8:	2282      	movs	r2, #130	; 0x82
 80037fa:	491d      	ldr	r1, [pc, #116]	; (8003870 <vTaskStartScheduler+0x88>)
 80037fc:	481d      	ldr	r0, [pc, #116]	; (8003874 <vTaskStartScheduler+0x8c>)
 80037fe:	f7ff fe81 	bl	8003504 <xTaskCreate>
 8003802:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d102      	bne.n	8003810 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800380a:	f000 ffb5 	bl	8004778 <xTimerCreateTimerTask>
 800380e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d116      	bne.n	8003844 <vTaskStartScheduler+0x5c>
	__asm volatile
 8003816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381a:	f383 8811 	msr	BASEPRI, r3
 800381e:	f3bf 8f6f 	isb	sy
 8003822:	f3bf 8f4f 	dsb	sy
 8003826:	60bb      	str	r3, [r7, #8]
}
 8003828:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800382a:	4b13      	ldr	r3, [pc, #76]	; (8003878 <vTaskStartScheduler+0x90>)
 800382c:	f04f 32ff 	mov.w	r2, #4294967295
 8003830:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003832:	4b12      	ldr	r3, [pc, #72]	; (800387c <vTaskStartScheduler+0x94>)
 8003834:	2201      	movs	r2, #1
 8003836:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003838:	4b11      	ldr	r3, [pc, #68]	; (8003880 <vTaskStartScheduler+0x98>)
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800383e:	f001 fb37 	bl	8004eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003842:	e00e      	b.n	8003862 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384a:	d10a      	bne.n	8003862 <vTaskStartScheduler+0x7a>
	__asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	607b      	str	r3, [r7, #4]
}
 800385e:	bf00      	nop
 8003860:	e7fe      	b.n	8003860 <vTaskStartScheduler+0x78>
}
 8003862:	bf00      	nop
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	2000032c 	.word	0x2000032c
 8003870:	08005fb8 	.word	0x08005fb8
 8003874:	08003e8d 	.word	0x08003e8d
 8003878:	20000328 	.word	0x20000328
 800387c:	20000314 	.word	0x20000314
 8003880:	2000030c 	.word	0x2000030c

08003884 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003888:	4b04      	ldr	r3, [pc, #16]	; (800389c <vTaskSuspendAll+0x18>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3301      	adds	r3, #1
 800388e:	4a03      	ldr	r2, [pc, #12]	; (800389c <vTaskSuspendAll+0x18>)
 8003890:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003892:	bf00      	nop
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	20000330 	.word	0x20000330

080038a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038ae:	4b41      	ldr	r3, [pc, #260]	; (80039b4 <xTaskResumeAll+0x114>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10a      	bne.n	80038cc <xTaskResumeAll+0x2c>
	__asm volatile
 80038b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ba:	f383 8811 	msr	BASEPRI, r3
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	603b      	str	r3, [r7, #0]
}
 80038c8:	bf00      	nop
 80038ca:	e7fe      	b.n	80038ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038cc:	f001 fba2 	bl	8005014 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038d0:	4b38      	ldr	r3, [pc, #224]	; (80039b4 <xTaskResumeAll+0x114>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	4a37      	ldr	r2, [pc, #220]	; (80039b4 <xTaskResumeAll+0x114>)
 80038d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038da:	4b36      	ldr	r3, [pc, #216]	; (80039b4 <xTaskResumeAll+0x114>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d161      	bne.n	80039a6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038e2:	4b35      	ldr	r3, [pc, #212]	; (80039b8 <xTaskResumeAll+0x118>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d05d      	beq.n	80039a6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038ea:	e02e      	b.n	800394a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ec:	4b33      	ldr	r3, [pc, #204]	; (80039bc <xTaskResumeAll+0x11c>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3318      	adds	r3, #24
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff f92d 	bl	8002b58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3304      	adds	r3, #4
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff f928 	bl	8002b58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	2201      	movs	r2, #1
 800390e:	409a      	lsls	r2, r3
 8003910:	4b2b      	ldr	r3, [pc, #172]	; (80039c0 <xTaskResumeAll+0x120>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4313      	orrs	r3, r2
 8003916:	4a2a      	ldr	r2, [pc, #168]	; (80039c0 <xTaskResumeAll+0x120>)
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4a27      	ldr	r2, [pc, #156]	; (80039c4 <xTaskResumeAll+0x124>)
 8003928:	441a      	add	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	3304      	adds	r3, #4
 800392e:	4619      	mov	r1, r3
 8003930:	4610      	mov	r0, r2
 8003932:	f7ff f8b4 	bl	8002a9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393a:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <xTaskResumeAll+0x128>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	429a      	cmp	r2, r3
 8003942:	d302      	bcc.n	800394a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003944:	4b21      	ldr	r3, [pc, #132]	; (80039cc <xTaskResumeAll+0x12c>)
 8003946:	2201      	movs	r2, #1
 8003948:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800394a:	4b1c      	ldr	r3, [pc, #112]	; (80039bc <xTaskResumeAll+0x11c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1cc      	bne.n	80038ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003958:	f000 fb30 	bl	8003fbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800395c:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <xTaskResumeAll+0x130>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d010      	beq.n	800398a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003968:	f000 f846 	bl	80039f8 <xTaskIncrementTick>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003972:	4b16      	ldr	r3, [pc, #88]	; (80039cc <xTaskResumeAll+0x12c>)
 8003974:	2201      	movs	r2, #1
 8003976:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3b01      	subs	r3, #1
 800397c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f1      	bne.n	8003968 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003984:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <xTaskResumeAll+0x130>)
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800398a:	4b10      	ldr	r3, [pc, #64]	; (80039cc <xTaskResumeAll+0x12c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d009      	beq.n	80039a6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003992:	2301      	movs	r3, #1
 8003994:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003996:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <xTaskResumeAll+0x134>)
 8003998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039a6:	f001 fb65 	bl	8005074 <vPortExitCritical>

	return xAlreadyYielded;
 80039aa:	68bb      	ldr	r3, [r7, #8]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20000330 	.word	0x20000330
 80039b8:	20000308 	.word	0x20000308
 80039bc:	200002c8 	.word	0x200002c8
 80039c0:	20000310 	.word	0x20000310
 80039c4:	2000016c 	.word	0x2000016c
 80039c8:	20000168 	.word	0x20000168
 80039cc:	2000031c 	.word	0x2000031c
 80039d0:	20000318 	.word	0x20000318
 80039d4:	e000ed04 	.word	0xe000ed04

080039d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80039de:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <xTaskGetTickCount+0x1c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80039e4:	687b      	ldr	r3, [r7, #4]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	2000030c 	.word	0x2000030c

080039f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a02:	4b4e      	ldr	r3, [pc, #312]	; (8003b3c <xTaskIncrementTick+0x144>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f040 8088 	bne.w	8003b1c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a0c:	4b4c      	ldr	r3, [pc, #304]	; (8003b40 <xTaskIncrementTick+0x148>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3301      	adds	r3, #1
 8003a12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a14:	4a4a      	ldr	r2, [pc, #296]	; (8003b40 <xTaskIncrementTick+0x148>)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d120      	bne.n	8003a62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a20:	4b48      	ldr	r3, [pc, #288]	; (8003b44 <xTaskIncrementTick+0x14c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <xTaskIncrementTick+0x48>
	__asm volatile
 8003a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2e:	f383 8811 	msr	BASEPRI, r3
 8003a32:	f3bf 8f6f 	isb	sy
 8003a36:	f3bf 8f4f 	dsb	sy
 8003a3a:	603b      	str	r3, [r7, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	e7fe      	b.n	8003a3e <xTaskIncrementTick+0x46>
 8003a40:	4b40      	ldr	r3, [pc, #256]	; (8003b44 <xTaskIncrementTick+0x14c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	4b40      	ldr	r3, [pc, #256]	; (8003b48 <xTaskIncrementTick+0x150>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a3e      	ldr	r2, [pc, #248]	; (8003b44 <xTaskIncrementTick+0x14c>)
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	4a3e      	ldr	r2, [pc, #248]	; (8003b48 <xTaskIncrementTick+0x150>)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	4b3d      	ldr	r3, [pc, #244]	; (8003b4c <xTaskIncrementTick+0x154>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	4a3c      	ldr	r2, [pc, #240]	; (8003b4c <xTaskIncrementTick+0x154>)
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	f000 faad 	bl	8003fbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a62:	4b3b      	ldr	r3, [pc, #236]	; (8003b50 <xTaskIncrementTick+0x158>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d348      	bcc.n	8003afe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a6c:	4b35      	ldr	r3, [pc, #212]	; (8003b44 <xTaskIncrementTick+0x14c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d104      	bne.n	8003a80 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a76:	4b36      	ldr	r3, [pc, #216]	; (8003b50 <xTaskIncrementTick+0x158>)
 8003a78:	f04f 32ff 	mov.w	r2, #4294967295
 8003a7c:	601a      	str	r2, [r3, #0]
					break;
 8003a7e:	e03e      	b.n	8003afe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a80:	4b30      	ldr	r3, [pc, #192]	; (8003b44 <xTaskIncrementTick+0x14c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d203      	bcs.n	8003aa0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a98:	4a2d      	ldr	r2, [pc, #180]	; (8003b50 <xTaskIncrementTick+0x158>)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a9e:	e02e      	b.n	8003afe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff f857 	bl	8002b58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d004      	beq.n	8003abc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	3318      	adds	r3, #24
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff f84e 	bl	8002b58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	4b23      	ldr	r3, [pc, #140]	; (8003b54 <xTaskIncrementTick+0x15c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	4a22      	ldr	r2, [pc, #136]	; (8003b54 <xTaskIncrementTick+0x15c>)
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4a1f      	ldr	r2, [pc, #124]	; (8003b58 <xTaskIncrementTick+0x160>)
 8003adc:	441a      	add	r2, r3
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	f7fe ffda 	bl	8002a9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aee:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <xTaskIncrementTick+0x164>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d3b9      	bcc.n	8003a6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003af8:	2301      	movs	r3, #1
 8003afa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003afc:	e7b6      	b.n	8003a6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003afe:	4b17      	ldr	r3, [pc, #92]	; (8003b5c <xTaskIncrementTick+0x164>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b04:	4914      	ldr	r1, [pc, #80]	; (8003b58 <xTaskIncrementTick+0x160>)
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d907      	bls.n	8003b26 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003b16:	2301      	movs	r3, #1
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	e004      	b.n	8003b26 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003b1c:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <xTaskIncrementTick+0x168>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3301      	adds	r3, #1
 8003b22:	4a0f      	ldr	r2, [pc, #60]	; (8003b60 <xTaskIncrementTick+0x168>)
 8003b24:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003b26:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <xTaskIncrementTick+0x16c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003b32:	697b      	ldr	r3, [r7, #20]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20000330 	.word	0x20000330
 8003b40:	2000030c 	.word	0x2000030c
 8003b44:	200002c0 	.word	0x200002c0
 8003b48:	200002c4 	.word	0x200002c4
 8003b4c:	20000320 	.word	0x20000320
 8003b50:	20000328 	.word	0x20000328
 8003b54:	20000310 	.word	0x20000310
 8003b58:	2000016c 	.word	0x2000016c
 8003b5c:	20000168 	.word	0x20000168
 8003b60:	20000318 	.word	0x20000318
 8003b64:	2000031c 	.word	0x2000031c

08003b68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b6e:	4b27      	ldr	r3, [pc, #156]	; (8003c0c <vTaskSwitchContext+0xa4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b76:	4b26      	ldr	r3, [pc, #152]	; (8003c10 <vTaskSwitchContext+0xa8>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b7c:	e03f      	b.n	8003bfe <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003b7e:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <vTaskSwitchContext+0xa8>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b84:	4b23      	ldr	r3, [pc, #140]	; (8003c14 <vTaskSwitchContext+0xac>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	fab3 f383 	clz	r3, r3
 8003b90:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003b92:	7afb      	ldrb	r3, [r7, #11]
 8003b94:	f1c3 031f 	rsb	r3, r3, #31
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	491f      	ldr	r1, [pc, #124]	; (8003c18 <vTaskSwitchContext+0xb0>)
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10a      	bne.n	8003bc4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb2:	f383 8811 	msr	BASEPRI, r3
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	f3bf 8f4f 	dsb	sy
 8003bbe:	607b      	str	r3, [r7, #4]
}
 8003bc0:	bf00      	nop
 8003bc2:	e7fe      	b.n	8003bc2 <vTaskSwitchContext+0x5a>
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4a12      	ldr	r2, [pc, #72]	; (8003c18 <vTaskSwitchContext+0xb0>)
 8003bd0:	4413      	add	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	3308      	adds	r3, #8
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d104      	bne.n	8003bf4 <vTaskSwitchContext+0x8c>
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	605a      	str	r2, [r3, #4]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <vTaskSwitchContext+0xb4>)
 8003bfc:	6013      	str	r3, [r2, #0]
}
 8003bfe:	bf00      	nop
 8003c00:	371c      	adds	r7, #28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20000330 	.word	0x20000330
 8003c10:	2000031c 	.word	0x2000031c
 8003c14:	20000310 	.word	0x20000310
 8003c18:	2000016c 	.word	0x2000016c
 8003c1c:	20000168 	.word	0x20000168

08003c20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	60fb      	str	r3, [r7, #12]
}
 8003c42:	bf00      	nop
 8003c44:	e7fe      	b.n	8003c44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c46:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <vTaskPlaceOnEventList+0x44>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3318      	adds	r3, #24
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fe ff49 	bl	8002ae6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c54:	2101      	movs	r1, #1
 8003c56:	6838      	ldr	r0, [r7, #0]
 8003c58:	f000 fa74 	bl	8004144 <prvAddCurrentTaskToDelayedList>
}
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20000168 	.word	0x20000168

08003c68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10a      	bne.n	8003c90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	617b      	str	r3, [r7, #20]
}
 8003c8c:	bf00      	nop
 8003c8e:	e7fe      	b.n	8003c8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c90:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <vTaskPlaceOnEventListRestricted+0x54>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3318      	adds	r3, #24
 8003c96:	4619      	mov	r1, r3
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f7fe ff00 	bl	8002a9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	68b8      	ldr	r0, [r7, #8]
 8003cae:	f000 fa49 	bl	8004144 <prvAddCurrentTaskToDelayedList>
	}
 8003cb2:	bf00      	nop
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000168 	.word	0x20000168

08003cc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10a      	bne.n	8003cec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	60fb      	str	r3, [r7, #12]
}
 8003ce8:	bf00      	nop
 8003cea:	e7fe      	b.n	8003cea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	3318      	adds	r3, #24
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fe ff31 	bl	8002b58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cf6:	4b1d      	ldr	r3, [pc, #116]	; (8003d6c <xTaskRemoveFromEventList+0xac>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d11c      	bne.n	8003d38 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe ff28 	bl	8002b58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	4b17      	ldr	r3, [pc, #92]	; (8003d70 <xTaskRemoveFromEventList+0xb0>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	4a16      	ldr	r2, [pc, #88]	; (8003d70 <xTaskRemoveFromEventList+0xb0>)
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <xTaskRemoveFromEventList+0xb4>)
 8003d28:	441a      	add	r2, r3
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4610      	mov	r0, r2
 8003d32:	f7fe feb4 	bl	8002a9e <vListInsertEnd>
 8003d36:	e005      	b.n	8003d44 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	3318      	adds	r3, #24
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	480e      	ldr	r0, [pc, #56]	; (8003d78 <xTaskRemoveFromEventList+0xb8>)
 8003d40:	f7fe fead 	bl	8002a9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d48:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <xTaskRemoveFromEventList+0xbc>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d905      	bls.n	8003d5e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d52:	2301      	movs	r3, #1
 8003d54:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d56:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <xTaskRemoveFromEventList+0xc0>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	e001      	b.n	8003d62 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003d62:	697b      	ldr	r3, [r7, #20]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20000330 	.word	0x20000330
 8003d70:	20000310 	.word	0x20000310
 8003d74:	2000016c 	.word	0x2000016c
 8003d78:	200002c8 	.word	0x200002c8
 8003d7c:	20000168 	.word	0x20000168
 8003d80:	2000031c 	.word	0x2000031c

08003d84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <vTaskInternalSetTimeOutState+0x24>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <vTaskInternalSetTimeOutState+0x28>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	605a      	str	r2, [r3, #4]
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	20000320 	.word	0x20000320
 8003dac:	2000030c 	.word	0x2000030c

08003db0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	613b      	str	r3, [r7, #16]
}
 8003dd2:	bf00      	nop
 8003dd4:	e7fe      	b.n	8003dd4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10a      	bne.n	8003df2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	60fb      	str	r3, [r7, #12]
}
 8003dee:	bf00      	nop
 8003df0:	e7fe      	b.n	8003df0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003df2:	f001 f90f 	bl	8005014 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003df6:	4b1d      	ldr	r3, [pc, #116]	; (8003e6c <xTaskCheckForTimeOut+0xbc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0e:	d102      	bne.n	8003e16 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61fb      	str	r3, [r7, #28]
 8003e14:	e023      	b.n	8003e5e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <xTaskCheckForTimeOut+0xc0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d007      	beq.n	8003e32 <xTaskCheckForTimeOut+0x82>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d302      	bcc.n	8003e32 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	61fb      	str	r3, [r7, #28]
 8003e30:	e015      	b.n	8003e5e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d20b      	bcs.n	8003e54 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	1ad2      	subs	r2, r2, r3
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ff9b 	bl	8003d84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	e004      	b.n	8003e5e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e5e:	f001 f909 	bl	8005074 <vPortExitCritical>

	return xReturn;
 8003e62:	69fb      	ldr	r3, [r7, #28]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3720      	adds	r7, #32
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	2000030c 	.word	0x2000030c
 8003e70:	20000320 	.word	0x20000320

08003e74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e78:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <vTaskMissedYield+0x14>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
}
 8003e7e:	bf00      	nop
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	2000031c 	.word	0x2000031c

08003e8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e94:	f000 f854 	bl	8003f40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e98:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <prvIdleTask+0x2c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d907      	bls.n	8003eb0 <prvIdleTask+0x24>
			{
				taskYIELD();
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <prvIdleTask+0x30>)
 8003ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003eb0:	f7fc fb68 	bl	8000584 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003eb4:	e7ee      	b.n	8003e94 <prvIdleTask+0x8>
 8003eb6:	bf00      	nop
 8003eb8:	2000016c 	.word	0x2000016c
 8003ebc:	e000ed04 	.word	0xe000ed04

08003ec0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	607b      	str	r3, [r7, #4]
 8003eca:	e00c      	b.n	8003ee6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4a12      	ldr	r2, [pc, #72]	; (8003f20 <prvInitialiseTaskLists+0x60>)
 8003ed8:	4413      	add	r3, r2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe fdb2 	bl	8002a44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	607b      	str	r3, [r7, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b0e      	cmp	r3, #14
 8003eea:	d9ef      	bls.n	8003ecc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003eec:	480d      	ldr	r0, [pc, #52]	; (8003f24 <prvInitialiseTaskLists+0x64>)
 8003eee:	f7fe fda9 	bl	8002a44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ef2:	480d      	ldr	r0, [pc, #52]	; (8003f28 <prvInitialiseTaskLists+0x68>)
 8003ef4:	f7fe fda6 	bl	8002a44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ef8:	480c      	ldr	r0, [pc, #48]	; (8003f2c <prvInitialiseTaskLists+0x6c>)
 8003efa:	f7fe fda3 	bl	8002a44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003efe:	480c      	ldr	r0, [pc, #48]	; (8003f30 <prvInitialiseTaskLists+0x70>)
 8003f00:	f7fe fda0 	bl	8002a44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f04:	480b      	ldr	r0, [pc, #44]	; (8003f34 <prvInitialiseTaskLists+0x74>)
 8003f06:	f7fe fd9d 	bl	8002a44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f0a:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <prvInitialiseTaskLists+0x78>)
 8003f0c:	4a05      	ldr	r2, [pc, #20]	; (8003f24 <prvInitialiseTaskLists+0x64>)
 8003f0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f10:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <prvInitialiseTaskLists+0x7c>)
 8003f12:	4a05      	ldr	r2, [pc, #20]	; (8003f28 <prvInitialiseTaskLists+0x68>)
 8003f14:	601a      	str	r2, [r3, #0]
}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	2000016c 	.word	0x2000016c
 8003f24:	20000298 	.word	0x20000298
 8003f28:	200002ac 	.word	0x200002ac
 8003f2c:	200002c8 	.word	0x200002c8
 8003f30:	200002dc 	.word	0x200002dc
 8003f34:	200002f4 	.word	0x200002f4
 8003f38:	200002c0 	.word	0x200002c0
 8003f3c:	200002c4 	.word	0x200002c4

08003f40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f46:	e019      	b.n	8003f7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f48:	f001 f864 	bl	8005014 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f4c:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <prvCheckTasksWaitingTermination+0x50>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fe fdfd 	bl	8002b58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <prvCheckTasksWaitingTermination+0x54>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	4a0b      	ldr	r2, [pc, #44]	; (8003f94 <prvCheckTasksWaitingTermination+0x54>)
 8003f66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <prvCheckTasksWaitingTermination+0x58>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <prvCheckTasksWaitingTermination+0x58>)
 8003f70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f72:	f001 f87f 	bl	8005074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f810 	bl	8003f9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f7c:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <prvCheckTasksWaitingTermination+0x58>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e1      	bne.n	8003f48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	200002dc 	.word	0x200002dc
 8003f94:	20000308 	.word	0x20000308
 8003f98:	200002f0 	.word	0x200002f0

08003f9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f001 fa19 	bl	80053e0 <vPortFree>
			vPortFree( pxTCB );
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f001 fa16 	bl	80053e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fc2:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <prvResetNextTaskUnblockTime+0x38>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d104      	bne.n	8003fd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <prvResetNextTaskUnblockTime+0x3c>)
 8003fce:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fd4:	e008      	b.n	8003fe8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fd6:	4b07      	ldr	r3, [pc, #28]	; (8003ff4 <prvResetNextTaskUnblockTime+0x38>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	4a04      	ldr	r2, [pc, #16]	; (8003ff8 <prvResetNextTaskUnblockTime+0x3c>)
 8003fe6:	6013      	str	r3, [r2, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	200002c0 	.word	0x200002c0
 8003ff8:	20000328 	.word	0x20000328

08003ffc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004002:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <xTaskGetSchedulerState+0x34>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d102      	bne.n	8004010 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800400a:	2301      	movs	r3, #1
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	e008      	b.n	8004022 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004010:	4b08      	ldr	r3, [pc, #32]	; (8004034 <xTaskGetSchedulerState+0x38>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d102      	bne.n	800401e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004018:	2302      	movs	r3, #2
 800401a:	607b      	str	r3, [r7, #4]
 800401c:	e001      	b.n	8004022 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800401e:	2300      	movs	r3, #0
 8004020:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004022:	687b      	ldr	r3, [r7, #4]
	}
 8004024:	4618      	mov	r0, r3
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	20000314 	.word	0x20000314
 8004034:	20000330 	.word	0x20000330

08004038 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d06e      	beq.n	800412c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800404e:	4b3a      	ldr	r3, [pc, #232]	; (8004138 <xTaskPriorityDisinherit+0x100>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	429a      	cmp	r2, r3
 8004056:	d00a      	beq.n	800406e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	60fb      	str	r3, [r7, #12]
}
 800406a:	bf00      	nop
 800406c:	e7fe      	b.n	800406c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	60bb      	str	r3, [r7, #8]
}
 8004088:	bf00      	nop
 800408a:	e7fe      	b.n	800408a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004090:	1e5a      	subs	r2, r3, #1
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800409e:	429a      	cmp	r2, r3
 80040a0:	d044      	beq.n	800412c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d140      	bne.n	800412c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	3304      	adds	r3, #4
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fe fd52 	bl	8002b58 <uxListRemove>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d115      	bne.n	80040e6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040be:	491f      	ldr	r1, [pc, #124]	; (800413c <xTaskPriorityDisinherit+0x104>)
 80040c0:	4613      	mov	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <xTaskPriorityDisinherit+0xae>
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	2201      	movs	r2, #1
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	43da      	mvns	r2, r3
 80040dc:	4b18      	ldr	r3, [pc, #96]	; (8004140 <xTaskPriorityDisinherit+0x108>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4013      	ands	r3, r2
 80040e2:	4a17      	ldr	r2, [pc, #92]	; (8004140 <xTaskPriorityDisinherit+0x108>)
 80040e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	f1c3 020f 	rsb	r2, r3, #15
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	2201      	movs	r2, #1
 8004100:	409a      	lsls	r2, r3
 8004102:	4b0f      	ldr	r3, [pc, #60]	; (8004140 <xTaskPriorityDisinherit+0x108>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4313      	orrs	r3, r2
 8004108:	4a0d      	ldr	r2, [pc, #52]	; (8004140 <xTaskPriorityDisinherit+0x108>)
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004110:	4613      	mov	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4a08      	ldr	r2, [pc, #32]	; (800413c <xTaskPriorityDisinherit+0x104>)
 800411a:	441a      	add	r2, r3
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	3304      	adds	r3, #4
 8004120:	4619      	mov	r1, r3
 8004122:	4610      	mov	r0, r2
 8004124:	f7fe fcbb 	bl	8002a9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004128:	2301      	movs	r3, #1
 800412a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800412c:	697b      	ldr	r3, [r7, #20]
	}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20000168 	.word	0x20000168
 800413c:	2000016c 	.word	0x2000016c
 8004140:	20000310 	.word	0x20000310

08004144 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800414e:	4b29      	ldr	r3, [pc, #164]	; (80041f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004154:	4b28      	ldr	r3, [pc, #160]	; (80041f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3304      	adds	r3, #4
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe fcfc 	bl	8002b58 <uxListRemove>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10b      	bne.n	800417e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004166:	4b24      	ldr	r3, [pc, #144]	; (80041f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	2201      	movs	r2, #1
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43da      	mvns	r2, r3
 8004174:	4b21      	ldr	r3, [pc, #132]	; (80041fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4013      	ands	r3, r2
 800417a:	4a20      	ldr	r2, [pc, #128]	; (80041fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800417c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d10a      	bne.n	800419c <prvAddCurrentTaskToDelayedList+0x58>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d007      	beq.n	800419c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800418c:	4b1a      	ldr	r3, [pc, #104]	; (80041f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3304      	adds	r3, #4
 8004192:	4619      	mov	r1, r3
 8004194:	481a      	ldr	r0, [pc, #104]	; (8004200 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004196:	f7fe fc82 	bl	8002a9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800419a:	e026      	b.n	80041ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4413      	add	r3, r2
 80041a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041a4:	4b14      	ldr	r3, [pc, #80]	; (80041f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d209      	bcs.n	80041c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041b4:	4b13      	ldr	r3, [pc, #76]	; (8004204 <prvAddCurrentTaskToDelayedList+0xc0>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3304      	adds	r3, #4
 80041be:	4619      	mov	r1, r3
 80041c0:	4610      	mov	r0, r2
 80041c2:	f7fe fc90 	bl	8002ae6 <vListInsert>
}
 80041c6:	e010      	b.n	80041ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041c8:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <prvAddCurrentTaskToDelayedList+0xc4>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3304      	adds	r3, #4
 80041d2:	4619      	mov	r1, r3
 80041d4:	4610      	mov	r0, r2
 80041d6:	f7fe fc86 	bl	8002ae6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041da:	4b0c      	ldr	r3, [pc, #48]	; (800420c <prvAddCurrentTaskToDelayedList+0xc8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d202      	bcs.n	80041ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80041e4:	4a09      	ldr	r2, [pc, #36]	; (800420c <prvAddCurrentTaskToDelayedList+0xc8>)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	6013      	str	r3, [r2, #0]
}
 80041ea:	bf00      	nop
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	2000030c 	.word	0x2000030c
 80041f8:	20000168 	.word	0x20000168
 80041fc:	20000310 	.word	0x20000310
 8004200:	200002f4 	.word	0x200002f4
 8004204:	200002c4 	.word	0x200002c4
 8004208:	200002c0 	.word	0x200002c0
 800420c:	20000328 	.word	0x20000328

08004210 <LongConvertCharArray>:
	#endif

#endif

void LongConvertCharArray(uint32_t num, char *str)
{
 8004210:	b480      	push	{r7}
 8004212:	b089      	sub	sp, #36	; 0x24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
	int i = 0;
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
	int j = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	61bb      	str	r3, [r7, #24]
	char temp;
	char buf[11];
	do {
		buf[i++] = num % 10 + '0';
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	4b21      	ldr	r3, [pc, #132]	; (80042ac <LongConvertCharArray+0x9c>)
 8004226:	fba3 2301 	umull	r2, r3, r3, r1
 800422a:	08da      	lsrs	r2, r3, #3
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	1aca      	subs	r2, r1, r3
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	1c59      	adds	r1, r3, #1
 800423c:	61f9      	str	r1, [r7, #28]
 800423e:	3230      	adds	r2, #48	; 0x30
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	3320      	adds	r3, #32
 8004244:	443b      	add	r3, r7
 8004246:	f803 2c14 	strb.w	r2, [r3, #-20]
		num /= 10;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a17      	ldr	r2, [pc, #92]	; (80042ac <LongConvertCharArray+0x9c>)
 800424e:	fba2 2303 	umull	r2, r3, r2, r3
 8004252:	08db      	lsrs	r3, r3, #3
 8004254:	607b      	str	r3, [r7, #4]
	} while (num);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e2      	bne.n	8004222 <LongConvertCharArray+0x12>
	buf[i] = '\0';
 800425c:	f107 020c 	add.w	r2, r7, #12
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	4413      	add	r3, r2
 8004264:	2200      	movs	r2, #0
 8004266:	701a      	strb	r2, [r3, #0]

	for (j = 0; j < i; j++) {
 8004268:	2300      	movs	r3, #0
 800426a:	61bb      	str	r3, [r7, #24]
 800426c:	e00e      	b.n	800428c <LongConvertCharArray+0x7c>
		str[j] = buf[i - j - 1];
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	1e5a      	subs	r2, r3, #1
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	440b      	add	r3, r1
 800427c:	3220      	adds	r2, #32
 800427e:	443a      	add	r2, r7
 8004280:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004284:	701a      	strb	r2, [r3, #0]
	for (j = 0; j < i; j++) {
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	3301      	adds	r3, #1
 800428a:	61bb      	str	r3, [r7, #24]
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	429a      	cmp	r2, r3
 8004292:	dbec      	blt.n	800426e <LongConvertCharArray+0x5e>
	}
	str[j] = '\0';
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	4413      	add	r3, r2
 800429a:	2200      	movs	r2, #0
 800429c:	701a      	strb	r2, [r3, #0]
}
 800429e:	bf00      	nop
 80042a0:	3724      	adds	r7, #36	; 0x24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	cccccccd 	.word	0xcccccccd

080042b0 <Uint32ConvertHex>:

void Uint32ConvertHex(uint32_t num, char *str)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
    int i, j;
    uint8_t nibble;

    str[0] = '0';
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2230      	movs	r2, #48	; 0x30
 80042be:	701a      	strb	r2, [r3, #0]
    str[1] = 'x';
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	3301      	adds	r3, #1
 80042c4:	2278      	movs	r2, #120	; 0x78
 80042c6:	701a      	strb	r2, [r3, #0]

    for (i = 7; i >= 0; --i) {
 80042c8:	2307      	movs	r3, #7
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	e023      	b.n	8004316 <Uint32ConvertHex+0x66>
        nibble = (num >> (i * 4)) & 0x0F;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	fa22 f303 	lsr.w	r3, r2, r3
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	73bb      	strb	r3, [r7, #14]
        if (nibble < 10) {
 80042e0:	7bbb      	ldrb	r3, [r7, #14]
 80042e2:	2b09      	cmp	r3, #9
 80042e4:	d80a      	bhi.n	80042fc <Uint32ConvertHex+0x4c>
            str[8 - i] = '0' + nibble;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f1c3 0308 	rsb	r3, r3, #8
 80042ec:	461a      	mov	r2, r3
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	4413      	add	r3, r2
 80042f2:	7bba      	ldrb	r2, [r7, #14]
 80042f4:	3230      	adds	r2, #48	; 0x30
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	e009      	b.n	8004310 <Uint32ConvertHex+0x60>
        } else {
            str[8 - i] = 'A' + nibble - 10;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f1c3 0308 	rsb	r3, r3, #8
 8004302:	461a      	mov	r2, r3
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	4413      	add	r3, r2
 8004308:	7bba      	ldrb	r2, [r7, #14]
 800430a:	3237      	adds	r2, #55	; 0x37
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	701a      	strb	r2, [r3, #0]
    for (i = 7; i >= 0; --i) {
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	3b01      	subs	r3, #1
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b00      	cmp	r3, #0
 800431a:	dad8      	bge.n	80042ce <Uint32ConvertHex+0x1e>
        }
    }

    str[9] = '\0';
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	3309      	adds	r3, #9
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]

    for (i = 2, j = 8; i < j; ++i, --j) {
 8004324:	2302      	movs	r3, #2
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	2308      	movs	r3, #8
 800432a:	613b      	str	r3, [r7, #16]
 800432c:	e017      	b.n	800435e <Uint32ConvertHex+0xae>
        char tmp = str[i];
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	4413      	add	r3, r2
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	73fb      	strb	r3, [r7, #15]
        str[i] = str[j];
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	441a      	add	r2, r3
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	6839      	ldr	r1, [r7, #0]
 8004342:	440b      	add	r3, r1
 8004344:	7812      	ldrb	r2, [r2, #0]
 8004346:	701a      	strb	r2, [r3, #0]
        str[j] = tmp;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	4413      	add	r3, r2
 800434e:	7bfa      	ldrb	r2, [r7, #15]
 8004350:	701a      	strb	r2, [r3, #0]
    for (i = 2, j = 8; i < j; ++i, --j) {
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	3301      	adds	r3, #1
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	3b01      	subs	r3, #1
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	429a      	cmp	r2, r3
 8004364:	dbe3      	blt.n	800432e <Uint32ConvertHex+0x7e>
    }
}
 8004366:	bf00      	nop
 8004368:	bf00      	nop
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <PrintTCBContext>:



void PrintTCBContext(TCB_t *taskTCB, char taskState[])
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b0b2      	sub	sp, #200	; 0xc8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
	/* get TCB contexts */
	char taskBasePriority[3];
	memset(taskBasePriority,'\0',sizeof(taskBasePriority));
 800437e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004382:	2203      	movs	r2, #3
 8004384:	2100      	movs	r1, #0
 8004386:	4618      	mov	r0, r3
 8004388:	f001 f978 	bl	800567c <memset>
	LongConvertCharArray(taskTCB->uxBasePriority, taskBasePriority);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004390:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8004394:	4611      	mov	r1, r2
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff ff3a 	bl	8004210 <LongConvertCharArray>

	char taskPriority[3];
	memset(taskPriority,'\0',sizeof(taskPriority));
 800439c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80043a0:	2203      	movs	r2, #3
 80043a2:	2100      	movs	r1, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f001 f969 	bl	800567c <memset>
	LongConvertCharArray(taskTCB->uxPriority, taskPriority);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80043b2:	4611      	mov	r1, r2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff ff2b 	bl	8004210 <LongConvertCharArray>

	char taskStack[11];
	memset(taskStack,'\0',sizeof(taskStack));
 80043ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80043be:	220b      	movs	r2, #11
 80043c0:	2100      	movs	r1, #0
 80043c2:	4618      	mov	r0, r3
 80043c4:	f001 f95a 	bl	800567c <memset>
	Uint32ConvertHex(taskTCB->pxStack, taskStack);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	461a      	mov	r2, r3
 80043ce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80043d2:	4619      	mov	r1, r3
 80043d4:	4610      	mov	r0, r2
 80043d6:	f7ff ff6b 	bl	80042b0 <Uint32ConvertHex>

	char taskTOS[11];
	memset(taskTOS,'\0',sizeof(taskTOS));
 80043da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80043de:	220b      	movs	r2, #11
 80043e0:	2100      	movs	r1, #0
 80043e2:	4618      	mov	r0, r3
 80043e4:	f001 f94a 	bl	800567c <memset>
	Uint32ConvertHex(taskTCB->pxTopOfStack, taskTOS);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80043f2:	4619      	mov	r1, r3
 80043f4:	4610      	mov	r0, r2
 80043f6:	f7ff ff5b 	bl	80042b0 <Uint32ConvertHex>

	/* ouput TCB contexts */
	char Monitor[150];
	memset(Monitor,'\0',sizeof(Monitor));
 80043fa:	f107 0308 	add.w	r3, r7, #8
 80043fe:	2296      	movs	r2, #150	; 0x96
 8004400:	2100      	movs	r1, #0
 8004402:	4618      	mov	r0, r3
 8004404:	f001 f93a 	bl	800567c <memset>
	strcat(Monitor,taskTCB->pcTaskName);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800440e:	f107 0308 	add.w	r3, r7, #8
 8004412:	4611      	mov	r1, r2
 8004414:	4618      	mov	r0, r3
 8004416:	f001 f959 	bl	80056cc <strcat>
	int taskNamelen = strlen(taskTCB->pcTaskName);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3334      	adds	r3, #52	; 0x34
 800441e:	4618      	mov	r0, r3
 8004420:	f7fb fed6 	bl	80001d0 <strlen>
 8004424:	4603      	mov	r3, r0
 8004426:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	for(int t = 0; t < (30-taskNamelen); ++t)
 800442a:	2300      	movs	r3, #0
 800442c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004430:	e013      	b.n	800445a <PrintTCBContext+0xe6>
		strcat(Monitor," ");
 8004432:	f107 0308 	add.w	r3, r7, #8
 8004436:	4618      	mov	r0, r3
 8004438:	f7fb feca 	bl	80001d0 <strlen>
 800443c:	4603      	mov	r3, r0
 800443e:	461a      	mov	r2, r3
 8004440:	f107 0308 	add.w	r3, r7, #8
 8004444:	4413      	add	r3, r2
 8004446:	494c      	ldr	r1, [pc, #304]	; (8004578 <PrintTCBContext+0x204>)
 8004448:	461a      	mov	r2, r3
 800444a:	460b      	mov	r3, r1
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	8013      	strh	r3, [r2, #0]
	for(int t = 0; t < (30-taskNamelen); ++t)
 8004450:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004454:	3301      	adds	r3, #1
 8004456:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800445a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800445e:	f1c3 031e 	rsb	r3, r3, #30
 8004462:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004466:	429a      	cmp	r2, r3
 8004468:	dbe3      	blt.n	8004432 <PrintTCBContext+0xbe>

	strcat(Monitor,taskBasePriority);	strcat(Monitor, "/");
 800446a:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800446e:	f107 0308 	add.w	r3, r7, #8
 8004472:	4611      	mov	r1, r2
 8004474:	4618      	mov	r0, r3
 8004476:	f001 f929 	bl	80056cc <strcat>
 800447a:	f107 0308 	add.w	r3, r7, #8
 800447e:	4618      	mov	r0, r3
 8004480:	f7fb fea6 	bl	80001d0 <strlen>
 8004484:	4603      	mov	r3, r0
 8004486:	461a      	mov	r2, r3
 8004488:	f107 0308 	add.w	r3, r7, #8
 800448c:	4413      	add	r3, r2
 800448e:	493b      	ldr	r1, [pc, #236]	; (800457c <PrintTCBContext+0x208>)
 8004490:	461a      	mov	r2, r3
 8004492:	460b      	mov	r3, r1
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	8013      	strh	r3, [r2, #0]
	strcat(Monitor,taskPriority);	strcat(Monitor,"			");
 8004498:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800449c:	f107 0308 	add.w	r3, r7, #8
 80044a0:	4611      	mov	r1, r2
 80044a2:	4618      	mov	r0, r3
 80044a4:	f001 f912 	bl	80056cc <strcat>
 80044a8:	f107 0308 	add.w	r3, r7, #8
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fb fe8f 	bl	80001d0 <strlen>
 80044b2:	4603      	mov	r3, r0
 80044b4:	461a      	mov	r2, r3
 80044b6:	f107 0308 	add.w	r3, r7, #8
 80044ba:	4413      	add	r3, r2
 80044bc:	4a30      	ldr	r2, [pc, #192]	; (8004580 <PrintTCBContext+0x20c>)
 80044be:	6810      	ldr	r0, [r2, #0]
 80044c0:	6018      	str	r0, [r3, #0]
	strcat(Monitor,taskStack);		strcat(Monitor,"	");
 80044c2:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80044c6:	f107 0308 	add.w	r3, r7, #8
 80044ca:	4611      	mov	r1, r2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f001 f8fd 	bl	80056cc <strcat>
 80044d2:	f107 0308 	add.w	r3, r7, #8
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fb fe7a 	bl	80001d0 <strlen>
 80044dc:	4603      	mov	r3, r0
 80044de:	461a      	mov	r2, r3
 80044e0:	f107 0308 	add.w	r3, r7, #8
 80044e4:	4413      	add	r3, r2
 80044e6:	4927      	ldr	r1, [pc, #156]	; (8004584 <PrintTCBContext+0x210>)
 80044e8:	461a      	mov	r2, r3
 80044ea:	460b      	mov	r3, r1
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	8013      	strh	r3, [r2, #0]
	strcat(Monitor,taskTOS);		strcat(Monitor,"         	");
 80044f0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80044f4:	f107 0308 	add.w	r3, r7, #8
 80044f8:	4611      	mov	r1, r2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f001 f8e6 	bl	80056cc <strcat>
 8004500:	f107 0308 	add.w	r3, r7, #8
 8004504:	4618      	mov	r0, r3
 8004506:	f7fb fe63 	bl	80001d0 <strlen>
 800450a:	4603      	mov	r3, r0
 800450c:	461a      	mov	r2, r3
 800450e:	f107 0308 	add.w	r3, r7, #8
 8004512:	4413      	add	r3, r2
 8004514:	491c      	ldr	r1, [pc, #112]	; (8004588 <PrintTCBContext+0x214>)
 8004516:	461a      	mov	r2, r3
 8004518:	460b      	mov	r3, r1
 800451a:	cb03      	ldmia	r3!, {r0, r1}
 800451c:	6010      	str	r0, [r2, #0]
 800451e:	6051      	str	r1, [r2, #4]
 8004520:	8819      	ldrh	r1, [r3, #0]
 8004522:	789b      	ldrb	r3, [r3, #2]
 8004524:	8111      	strh	r1, [r2, #8]
 8004526:	7293      	strb	r3, [r2, #10]
	strcat(Monitor, taskState);	    strcat(Monitor, "\n\r");
 8004528:	f107 0308 	add.w	r3, r7, #8
 800452c:	6839      	ldr	r1, [r7, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f001 f8cc 	bl	80056cc <strcat>
 8004534:	f107 0308 	add.w	r3, r7, #8
 8004538:	4618      	mov	r0, r3
 800453a:	f7fb fe49 	bl	80001d0 <strlen>
 800453e:	4603      	mov	r3, r0
 8004540:	461a      	mov	r2, r3
 8004542:	f107 0308 	add.w	r3, r7, #8
 8004546:	4413      	add	r3, r2
 8004548:	4a10      	ldr	r2, [pc, #64]	; (800458c <PrintTCBContext+0x218>)
 800454a:	8811      	ldrh	r1, [r2, #0]
 800454c:	7892      	ldrb	r2, [r2, #2]
 800454e:	8019      	strh	r1, [r3, #0]
 8004550:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart2,(uint8_t *)Monitor,strlen(Monitor),0xffff);
 8004552:	f107 0308 	add.w	r3, r7, #8
 8004556:	4618      	mov	r0, r3
 8004558:	f7fb fe3a 	bl	80001d0 <strlen>
 800455c:	4603      	mov	r3, r0
 800455e:	b29a      	uxth	r2, r3
 8004560:	f107 0108 	add.w	r1, r7, #8
 8004564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004568:	4809      	ldr	r0, [pc, #36]	; (8004590 <PrintTCBContext+0x21c>)
 800456a:	f7fd fef6 	bl	800235a <HAL_UART_Transmit>
}
 800456e:	bf00      	nop
 8004570:	37c8      	adds	r7, #200	; 0xc8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	08005fc0 	.word	0x08005fc0
 800457c:	08005fc4 	.word	0x08005fc4
 8004580:	08005fc8 	.word	0x08005fc8
 8004584:	08005fcc 	.word	0x08005fcc
 8004588:	08005fd0 	.word	0x08005fd0
 800458c:	08005fdc 	.word	0x08005fdc
 8004590:	20000090 	.word	0x20000090

08004594 <Taskmonitor>:



void Taskmonitor(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b0b4      	sub	sp, #208	; 0xd0
 8004598:	af00      	add	r7, sp, #0
	/* Initialize string */
	int max_priority = 15;
 800459a:	230f      	movs	r3, #15
 800459c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	TCB_t *pvowner;
	TCB_t *pxCurrent;


	char Monitor_data[130];
	pxCurrent = pxCurrentTCB;
 80045a0:	4b6c      	ldr	r3, [pc, #432]	; (8004754 <Taskmonitor+0x1c0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	/* Stop scheduler */
	/* Taskmonitor() will block when UART is transmitting data */
	/* Scheduler will change list data when Taskmonitor() is blocked */
	vTaskSuspendAll();
 80045a8:	f7ff f96c 	bl	8003884 <vTaskSuspendAll>
	/* Print title */
	sprintf(Monitor_data,"|Name                     |Priority(Base/actual)      |pxStack          |pxTopOfStack          |State |\n\r");
 80045ac:	f107 0320 	add.w	r3, r7, #32
 80045b0:	4969      	ldr	r1, [pc, #420]	; (8004758 <Taskmonitor+0x1c4>)
 80045b2:	4618      	mov	r0, r3
 80045b4:	f001 f86a 	bl	800568c <siprintf>

	//printf(Monitor_data,pxStack,pxTopOfStack);
	HAL_UART_Transmit(&huart2,(uint8_t *)Monitor_data,strlen(Monitor_data),0xffff);
 80045b8:	f107 0320 	add.w	r3, r7, #32
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fb fe07 	bl	80001d0 <strlen>
 80045c2:	4603      	mov	r3, r0
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	f107 0120 	add.w	r1, r7, #32
 80045ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045ce:	4863      	ldr	r0, [pc, #396]	; (800475c <Taskmonitor+0x1c8>)
 80045d0:	f7fd fec3 	bl	800235a <HAL_UART_Transmit>


	/* pxReadyTasksLists */

    for (int i = 0; i < configMAX_PRIORITIES; i++)
 80045d4:	2300      	movs	r3, #0
 80045d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045da:	e04e      	b.n	800467a <Taskmonitor+0xe6>
    {
        if (listLIST_IS_EMPTY( &pxReadyTasksLists[i] ) == pdFALSE)
 80045dc:	4960      	ldr	r1, [pc, #384]	; (8004760 <Taskmonitor+0x1cc>)
 80045de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80045e2:	4613      	mov	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d03e      	beq.n	8004670 <Taskmonitor+0xdc>
        {
            list_item = listGET_ITEM_OF_HEAD_ENTRY( &(pxReadyTasksLists[i] ));
 80045f2:	495b      	ldr	r1, [pc, #364]	; (8004760 <Taskmonitor+0x1cc>)
 80045f4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	330c      	adds	r3, #12
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            ready_list_len = listCURRENT_LIST_LENGTH( &(pxReadyTasksLists[i] ));
 800460a:	4955      	ldr	r1, [pc, #340]	; (8004760 <Taskmonitor+0x1cc>)
 800460c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            for (int j = 0; j < ready_list_len; j++)
 8004620:	2300      	movs	r3, #0
 8004622:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004626:	e01d      	b.n	8004664 <Taskmonitor+0xd0>
            {
        		pvowner = list_item->pvOwner;
 8004628:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                char taskState[6] = "Ready";
 8004632:	4a4c      	ldr	r2, [pc, #304]	; (8004764 <Taskmonitor+0x1d0>)
 8004634:	f107 0318 	add.w	r3, r7, #24
 8004638:	e892 0003 	ldmia.w	r2, {r0, r1}
 800463c:	6018      	str	r0, [r3, #0]
 800463e:	3304      	adds	r3, #4
 8004640:	8019      	strh	r1, [r3, #0]

                PrintTCBContext (pvowner, taskState);
 8004642:	f107 0318 	add.w	r3, r7, #24
 8004646:	4619      	mov	r1, r3
 8004648:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800464c:	f7ff fe92 	bl	8004374 <PrintTCBContext>
                list_item = list_item->pxNext;
 8004650:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            for (int j = 0; j < ready_list_len; j++)
 800465a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800465e:	3301      	adds	r3, #1
 8004660:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004664:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004668:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800466c:	429a      	cmp	r2, r3
 800466e:	dbdb      	blt.n	8004628 <Taskmonitor+0x94>
    for (int i = 0; i < configMAX_PRIORITIES; i++)
 8004670:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004674:	3301      	adds	r3, #1
 8004676:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800467a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800467e:	2b0e      	cmp	r3, #14
 8004680:	ddac      	ble.n	80045dc <Taskmonitor+0x48>
            }
        }
    }
	/* pxDelayedTaskList*/
	list_item = listGET_ITEM_OF_HEAD_ENTRY( &( pxDelayedTaskList[0] ) );
 8004682:	4b39      	ldr	r3, [pc, #228]	; (8004768 <Taskmonitor+0x1d4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	delay_list_len = listCURRENT_LIST_LENGTH(&(pxDelayedTaskList[0]));
 800468c:	4b36      	ldr	r3, [pc, #216]	; (8004768 <Taskmonitor+0x1d4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	for (int i = 0; i < delay_list_len; i++)
 8004696:	2300      	movs	r3, #0
 8004698:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800469c:	e01e      	b.n	80046dc <Taskmonitor+0x148>
	{
		pvowner = list_item->pvOwner;
 800469e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        char taskState[10] = "Blocked";
 80046a8:	4a30      	ldr	r2, [pc, #192]	; (800476c <Taskmonitor+0x1d8>)
 80046aa:	f107 030c 	add.w	r3, r7, #12
 80046ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80046b6:	2300      	movs	r3, #0
 80046b8:	82bb      	strh	r3, [r7, #20]

        PrintTCBContext (pvowner, taskState);
 80046ba:	f107 030c 	add.w	r3, r7, #12
 80046be:	4619      	mov	r1, r3
 80046c0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80046c4:	f7ff fe56 	bl	8004374 <PrintTCBContext>
		list_item = list_item->pxNext;
 80046c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	for (int i = 0; i < delay_list_len; i++)
 80046d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046d6:	3301      	adds	r3, #1
 80046d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80046e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80046e4:	429a      	cmp	r2, r3
 80046e6:	dbda      	blt.n	800469e <Taskmonitor+0x10a>
	}

	/* pxOverflowDelayedTaskList */
	list_item = listGET_ITEM_OF_HEAD_ENTRY( &( pxOverflowDelayedTaskList[0] ) );
 80046e8:	4b21      	ldr	r3, [pc, #132]	; (8004770 <Taskmonitor+0x1dc>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	overflow_list_len = listCURRENT_LIST_LENGTH(&(pxOverflowDelayedTaskList[0]));
 80046f2:	4b1f      	ldr	r3, [pc, #124]	; (8004770 <Taskmonitor+0x1dc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	for (int i = 0; i < overflow_list_len; i++)
 80046fc:	2300      	movs	r3, #0
 80046fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004702:	e01b      	b.n	800473c <Taskmonitor+0x1a8>
	{
		pvowner = list_item->pvOwner;
 8004704:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        char taskState[10] = "Overflow";
 800470e:	4a19      	ldr	r2, [pc, #100]	; (8004774 <Taskmonitor+0x1e0>)
 8004710:	463b      	mov	r3, r7
 8004712:	ca07      	ldmia	r2, {r0, r1, r2}
 8004714:	c303      	stmia	r3!, {r0, r1}
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	2300      	movs	r3, #0
 800471a:	727b      	strb	r3, [r7, #9]
        PrintTCBContext (pvowner, taskState);
 800471c:	463b      	mov	r3, r7
 800471e:	4619      	mov	r1, r3
 8004720:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004724:	f7ff fe26 	bl	8004374 <PrintTCBContext>
		list_item = list_item->pxNext;
 8004728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	for (int i = 0; i < overflow_list_len; i++)
 8004732:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004736:	3301      	adds	r3, #1
 8004738:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800473c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004740:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004744:	429a      	cmp	r2, r3
 8004746:	dbdd      	blt.n	8004704 <Taskmonitor+0x170>
	}
	/* Resume scheduler */
	xTaskResumeAll();
 8004748:	f7ff f8aa 	bl	80038a0 <xTaskResumeAll>
}
 800474c:	bf00      	nop
 800474e:	37d0      	adds	r7, #208	; 0xd0
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20000168 	.word	0x20000168
 8004758:	08005fe0 	.word	0x08005fe0
 800475c:	20000090 	.word	0x20000090
 8004760:	2000016c 	.word	0x2000016c
 8004764:	0800604c 	.word	0x0800604c
 8004768:	200002c0 	.word	0x200002c0
 800476c:	08006054 	.word	0x08006054
 8004770:	200002c4 	.word	0x200002c4
 8004774:	08006060 	.word	0x08006060

08004778 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800477e:	2300      	movs	r3, #0
 8004780:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004782:	f000 fad5 	bl	8004d30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004786:	4b11      	ldr	r3, [pc, #68]	; (80047cc <xTimerCreateTimerTask+0x54>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800478e:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <xTimerCreateTimerTask+0x58>)
 8004790:	9301      	str	r3, [sp, #4]
 8004792:	2302      	movs	r3, #2
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	2300      	movs	r3, #0
 8004798:	f44f 7282 	mov.w	r2, #260	; 0x104
 800479c:	490d      	ldr	r1, [pc, #52]	; (80047d4 <xTimerCreateTimerTask+0x5c>)
 800479e:	480e      	ldr	r0, [pc, #56]	; (80047d8 <xTimerCreateTimerTask+0x60>)
 80047a0:	f7fe feb0 	bl	8003504 <xTaskCreate>
 80047a4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	603b      	str	r3, [r7, #0]
}
 80047be:	bf00      	nop
 80047c0:	e7fe      	b.n	80047c0 <xTimerCreateTimerTask+0x48>
	return xReturn;
 80047c2:	687b      	ldr	r3, [r7, #4]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	20000364 	.word	0x20000364
 80047d0:	20000368 	.word	0x20000368
 80047d4:	0800606c 	.word	0x0800606c
 80047d8:	08004911 	.word	0x08004911

080047dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08a      	sub	sp, #40	; 0x28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80047ea:	2300      	movs	r3, #0
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10a      	bne.n	800480a <xTimerGenericCommand+0x2e>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	623b      	str	r3, [r7, #32]
}
 8004806:	bf00      	nop
 8004808:	e7fe      	b.n	8004808 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800480a:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <xTimerGenericCommand+0x98>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d02a      	beq.n	8004868 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b05      	cmp	r3, #5
 8004822:	dc18      	bgt.n	8004856 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004824:	f7ff fbea 	bl	8003ffc <xTaskGetSchedulerState>
 8004828:	4603      	mov	r3, r0
 800482a:	2b02      	cmp	r3, #2
 800482c:	d109      	bne.n	8004842 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800482e:	4b11      	ldr	r3, [pc, #68]	; (8004874 <xTimerGenericCommand+0x98>)
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	f107 0114 	add.w	r1, r7, #20
 8004836:	2300      	movs	r3, #0
 8004838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800483a:	f7fe fa7f 	bl	8002d3c <xQueueGenericSend>
 800483e:	6278      	str	r0, [r7, #36]	; 0x24
 8004840:	e012      	b.n	8004868 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004842:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <xTimerGenericCommand+0x98>)
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	f107 0114 	add.w	r1, r7, #20
 800484a:	2300      	movs	r3, #0
 800484c:	2200      	movs	r2, #0
 800484e:	f7fe fa75 	bl	8002d3c <xQueueGenericSend>
 8004852:	6278      	str	r0, [r7, #36]	; 0x24
 8004854:	e008      	b.n	8004868 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004856:	4b07      	ldr	r3, [pc, #28]	; (8004874 <xTimerGenericCommand+0x98>)
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	f107 0114 	add.w	r1, r7, #20
 800485e:	2300      	movs	r3, #0
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	f7fe fb69 	bl	8002f38 <xQueueGenericSendFromISR>
 8004866:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800486a:	4618      	mov	r0, r3
 800486c:	3728      	adds	r7, #40	; 0x28
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000364 	.word	0x20000364

08004878 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af02      	add	r7, sp, #8
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004882:	4b22      	ldr	r3, [pc, #136]	; (800490c <prvProcessExpiredTimer+0x94>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	3304      	adds	r3, #4
 8004890:	4618      	mov	r0, r3
 8004892:	f7fe f961 	bl	8002b58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d022      	beq.n	80048ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	699a      	ldr	r2, [r3, #24]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	18d1      	adds	r1, r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	6978      	ldr	r0, [r7, #20]
 80048b2:	f000 f8d1 	bl	8004a58 <prvInsertTimerInActiveList>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01f      	beq.n	80048fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048bc:	2300      	movs	r3, #0
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	2300      	movs	r3, #0
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	2100      	movs	r1, #0
 80048c6:	6978      	ldr	r0, [r7, #20]
 80048c8:	f7ff ff88 	bl	80047dc <xTimerGenericCommand>
 80048cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d113      	bne.n	80048fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	60fb      	str	r3, [r7, #12]
}
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	6978      	ldr	r0, [r7, #20]
 8004902:	4798      	blx	r3
}
 8004904:	bf00      	nop
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	2000035c 	.word	0x2000035c

08004910 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004918:	f107 0308 	add.w	r3, r7, #8
 800491c:	4618      	mov	r0, r3
 800491e:	f000 f857 	bl	80049d0 <prvGetNextExpireTime>
 8004922:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4619      	mov	r1, r3
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 f803 	bl	8004934 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800492e:	f000 f8d5 	bl	8004adc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004932:	e7f1      	b.n	8004918 <prvTimerTask+0x8>

08004934 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800493e:	f7fe ffa1 	bl	8003884 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004942:	f107 0308 	add.w	r3, r7, #8
 8004946:	4618      	mov	r0, r3
 8004948:	f000 f866 	bl	8004a18 <prvSampleTimeNow>
 800494c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d130      	bne.n	80049b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10a      	bne.n	8004970 <prvProcessTimerOrBlockTask+0x3c>
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	429a      	cmp	r2, r3
 8004960:	d806      	bhi.n	8004970 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004962:	f7fe ff9d 	bl	80038a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004966:	68f9      	ldr	r1, [r7, #12]
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff ff85 	bl	8004878 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800496e:	e024      	b.n	80049ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d008      	beq.n	8004988 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004976:	4b13      	ldr	r3, [pc, #76]	; (80049c4 <prvProcessTimerOrBlockTask+0x90>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <prvProcessTimerOrBlockTask+0x50>
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <prvProcessTimerOrBlockTask+0x52>
 8004984:	2300      	movs	r3, #0
 8004986:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004988:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <prvProcessTimerOrBlockTask+0x94>)
 800498a:	6818      	ldr	r0, [r3, #0]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	4619      	mov	r1, r3
 8004996:	f7fe fd81 	bl	800349c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800499a:	f7fe ff81 	bl	80038a0 <xTaskResumeAll>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80049a4:	4b09      	ldr	r3, [pc, #36]	; (80049cc <prvProcessTimerOrBlockTask+0x98>)
 80049a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	f3bf 8f6f 	isb	sy
}
 80049b4:	e001      	b.n	80049ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80049b6:	f7fe ff73 	bl	80038a0 <xTaskResumeAll>
}
 80049ba:	bf00      	nop
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000360 	.word	0x20000360
 80049c8:	20000364 	.word	0x20000364
 80049cc:	e000ed04 	.word	0xe000ed04

080049d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049d8:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <prvGetNextExpireTime+0x44>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <prvGetNextExpireTime+0x16>
 80049e2:	2201      	movs	r2, #1
 80049e4:	e000      	b.n	80049e8 <prvGetNextExpireTime+0x18>
 80049e6:	2200      	movs	r2, #0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d105      	bne.n	8004a00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049f4:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <prvGetNextExpireTime+0x44>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	e001      	b.n	8004a04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a04:	68fb      	ldr	r3, [r7, #12]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	2000035c 	.word	0x2000035c

08004a18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a20:	f7fe ffda 	bl	80039d8 <xTaskGetTickCount>
 8004a24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a26:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <prvSampleTimeNow+0x3c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d205      	bcs.n	8004a3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a30:	f000 f91a 	bl	8004c68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	e002      	b.n	8004a42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a42:	4a04      	ldr	r2, [pc, #16]	; (8004a54 <prvSampleTimeNow+0x3c>)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a48:	68fb      	ldr	r3, [r7, #12]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	2000036c 	.word	0x2000036c

08004a58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a66:	2300      	movs	r3, #0
 8004a68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d812      	bhi.n	8004aa4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	1ad2      	subs	r2, r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d302      	bcc.n	8004a92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	e01b      	b.n	8004aca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a92:	4b10      	ldr	r3, [pc, #64]	; (8004ad4 <prvInsertTimerInActiveList+0x7c>)
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f7fe f822 	bl	8002ae6 <vListInsert>
 8004aa2:	e012      	b.n	8004aca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d206      	bcs.n	8004aba <prvInsertTimerInActiveList+0x62>
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d302      	bcc.n	8004aba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	e007      	b.n	8004aca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004aba:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <prvInsertTimerInActiveList+0x80>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	f7fe f80e 	bl	8002ae6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004aca:	697b      	ldr	r3, [r7, #20]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	20000360 	.word	0x20000360
 8004ad8:	2000035c 	.word	0x2000035c

08004adc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08c      	sub	sp, #48	; 0x30
 8004ae0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ae2:	e0ae      	b.n	8004c42 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f2c0 80aa 	blt.w	8004c40 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d004      	beq.n	8004b02 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	3304      	adds	r3, #4
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fe f82b 	bl	8002b58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b02:	1d3b      	adds	r3, r7, #4
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff ff87 	bl	8004a18 <prvSampleTimeNow>
 8004b0a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b09      	cmp	r3, #9
 8004b10:	f200 8097 	bhi.w	8004c42 <prvProcessReceivedCommands+0x166>
 8004b14:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <prvProcessReceivedCommands+0x40>)
 8004b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1a:	bf00      	nop
 8004b1c:	08004b45 	.word	0x08004b45
 8004b20:	08004b45 	.word	0x08004b45
 8004b24:	08004b45 	.word	0x08004b45
 8004b28:	08004bb9 	.word	0x08004bb9
 8004b2c:	08004bcd 	.word	0x08004bcd
 8004b30:	08004c17 	.word	0x08004c17
 8004b34:	08004b45 	.word	0x08004b45
 8004b38:	08004b45 	.word	0x08004b45
 8004b3c:	08004bb9 	.word	0x08004bb9
 8004b40:	08004bcd 	.word	0x08004bcd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b4a:	f043 0301 	orr.w	r3, r3, #1
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	18d1      	adds	r1, r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a3a      	ldr	r2, [r7, #32]
 8004b62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b64:	f7ff ff78 	bl	8004a58 <prvInsertTimerInActiveList>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d069      	beq.n	8004c42 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d05e      	beq.n	8004c42 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	441a      	add	r2, r3
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	2300      	movs	r3, #0
 8004b92:	2100      	movs	r1, #0
 8004b94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b96:	f7ff fe21 	bl	80047dc <xTimerGenericCommand>
 8004b9a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d14f      	bne.n	8004c42 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8004ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	61bb      	str	r3, [r7, #24]
}
 8004bb4:	bf00      	nop
 8004bb6:	e7fe      	b.n	8004bb6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bbe:	f023 0301 	bic.w	r3, r3, #1
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004bca:	e03a      	b.n	8004c42 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10a      	bne.n	8004c02 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	617b      	str	r3, [r7, #20]
}
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	699a      	ldr	r2, [r3, #24]
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	18d1      	adds	r1, r2, r3
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	6a3a      	ldr	r2, [r7, #32]
 8004c0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c10:	f7ff ff22 	bl	8004a58 <prvInsertTimerInActiveList>
					break;
 8004c14:	e015      	b.n	8004c42 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d103      	bne.n	8004c2c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004c24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c26:	f000 fbdb 	bl	80053e0 <vPortFree>
 8004c2a:	e00a      	b.n	8004c42 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c32:	f023 0301 	bic.w	r3, r3, #1
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c3e:	e000      	b.n	8004c42 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004c40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c42:	4b08      	ldr	r3, [pc, #32]	; (8004c64 <prvProcessReceivedCommands+0x188>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f107 0108 	add.w	r1, r7, #8
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fe fa0b 	bl	8003068 <xQueueReceive>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f47f af45 	bne.w	8004ae4 <prvProcessReceivedCommands+0x8>
	}
}
 8004c5a:	bf00      	nop
 8004c5c:	bf00      	nop
 8004c5e:	3728      	adds	r7, #40	; 0x28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20000364 	.word	0x20000364

08004c68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b088      	sub	sp, #32
 8004c6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c6e:	e048      	b.n	8004d02 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c70:	4b2d      	ldr	r3, [pc, #180]	; (8004d28 <prvSwitchTimerLists+0xc0>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c7a:	4b2b      	ldr	r3, [pc, #172]	; (8004d28 <prvSwitchTimerLists+0xc0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	3304      	adds	r3, #4
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7fd ff65 	bl	8002b58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d02e      	beq.n	8004d02 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4413      	add	r3, r2
 8004cac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d90e      	bls.n	8004cd4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cc2:	4b19      	ldr	r3, [pc, #100]	; (8004d28 <prvSwitchTimerLists+0xc0>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4610      	mov	r0, r2
 8004cce:	f7fd ff0a 	bl	8002ae6 <vListInsert>
 8004cd2:	e016      	b.n	8004d02 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	2300      	movs	r3, #0
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	2100      	movs	r1, #0
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f7ff fd7c 	bl	80047dc <xTimerGenericCommand>
 8004ce4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10a      	bne.n	8004d02 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	603b      	str	r3, [r7, #0]
}
 8004cfe:	bf00      	nop
 8004d00:	e7fe      	b.n	8004d00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d02:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <prvSwitchTimerLists+0xc0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1b1      	bne.n	8004c70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d0c:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <prvSwitchTimerLists+0xc0>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d12:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <prvSwitchTimerLists+0xc4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a04      	ldr	r2, [pc, #16]	; (8004d28 <prvSwitchTimerLists+0xc0>)
 8004d18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d1a:	4a04      	ldr	r2, [pc, #16]	; (8004d2c <prvSwitchTimerLists+0xc4>)
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	6013      	str	r3, [r2, #0]
}
 8004d20:	bf00      	nop
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	2000035c 	.word	0x2000035c
 8004d2c:	20000360 	.word	0x20000360

08004d30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d34:	f000 f96e 	bl	8005014 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d38:	4b12      	ldr	r3, [pc, #72]	; (8004d84 <prvCheckForValidListAndQueue+0x54>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d11d      	bne.n	8004d7c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d40:	4811      	ldr	r0, [pc, #68]	; (8004d88 <prvCheckForValidListAndQueue+0x58>)
 8004d42:	f7fd fe7f 	bl	8002a44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d46:	4811      	ldr	r0, [pc, #68]	; (8004d8c <prvCheckForValidListAndQueue+0x5c>)
 8004d48:	f7fd fe7c 	bl	8002a44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d4c:	4b10      	ldr	r3, [pc, #64]	; (8004d90 <prvCheckForValidListAndQueue+0x60>)
 8004d4e:	4a0e      	ldr	r2, [pc, #56]	; (8004d88 <prvCheckForValidListAndQueue+0x58>)
 8004d50:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d52:	4b10      	ldr	r3, [pc, #64]	; (8004d94 <prvCheckForValidListAndQueue+0x64>)
 8004d54:	4a0d      	ldr	r2, [pc, #52]	; (8004d8c <prvCheckForValidListAndQueue+0x5c>)
 8004d56:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004d58:	2200      	movs	r2, #0
 8004d5a:	210c      	movs	r1, #12
 8004d5c:	200a      	movs	r0, #10
 8004d5e:	f7fd ff8d 	bl	8002c7c <xQueueGenericCreate>
 8004d62:	4603      	mov	r3, r0
 8004d64:	4a07      	ldr	r2, [pc, #28]	; (8004d84 <prvCheckForValidListAndQueue+0x54>)
 8004d66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <prvCheckForValidListAndQueue+0x54>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d70:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <prvCheckForValidListAndQueue+0x54>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4908      	ldr	r1, [pc, #32]	; (8004d98 <prvCheckForValidListAndQueue+0x68>)
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fe fb66 	bl	8003448 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d7c:	f000 f97a 	bl	8005074 <vPortExitCritical>
}
 8004d80:	bf00      	nop
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20000364 	.word	0x20000364
 8004d88:	20000334 	.word	0x20000334
 8004d8c:	20000348 	.word	0x20000348
 8004d90:	2000035c 	.word	0x2000035c
 8004d94:	20000360 	.word	0x20000360
 8004d98:	08006074 	.word	0x08006074

08004d9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	3b04      	subs	r3, #4
 8004dac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004db4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	3b04      	subs	r3, #4
 8004dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f023 0201 	bic.w	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3b04      	subs	r3, #4
 8004dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004dcc:	4a0c      	ldr	r2, [pc, #48]	; (8004e00 <pxPortInitialiseStack+0x64>)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3b14      	subs	r3, #20
 8004dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3b04      	subs	r3, #4
 8004de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f06f 0202 	mvn.w	r2, #2
 8004dea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3b20      	subs	r3, #32
 8004df0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004df2:	68fb      	ldr	r3, [r7, #12]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	08004e05 	.word	0x08004e05

08004e04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e0e:	4b12      	ldr	r3, [pc, #72]	; (8004e58 <prvTaskExitError+0x54>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e16:	d00a      	beq.n	8004e2e <prvTaskExitError+0x2a>
	__asm volatile
 8004e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	60fb      	str	r3, [r7, #12]
}
 8004e2a:	bf00      	nop
 8004e2c:	e7fe      	b.n	8004e2c <prvTaskExitError+0x28>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	60bb      	str	r3, [r7, #8]
}
 8004e40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e42:	bf00      	nop
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0fc      	beq.n	8004e44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e4a:	bf00      	nop
 8004e4c:	bf00      	nop
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	2000000c 	.word	0x2000000c
 8004e5c:	00000000 	.word	0x00000000

08004e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e60:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <pxCurrentTCBConst2>)
 8004e62:	6819      	ldr	r1, [r3, #0]
 8004e64:	6808      	ldr	r0, [r1, #0]
 8004e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6a:	f380 8809 	msr	PSP, r0
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f04f 0000 	mov.w	r0, #0
 8004e76:	f380 8811 	msr	BASEPRI, r0
 8004e7a:	4770      	bx	lr
 8004e7c:	f3af 8000 	nop.w

08004e80 <pxCurrentTCBConst2>:
 8004e80:	20000168 	.word	0x20000168
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop

08004e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e88:	4808      	ldr	r0, [pc, #32]	; (8004eac <prvPortStartFirstTask+0x24>)
 8004e8a:	6800      	ldr	r0, [r0, #0]
 8004e8c:	6800      	ldr	r0, [r0, #0]
 8004e8e:	f380 8808 	msr	MSP, r0
 8004e92:	f04f 0000 	mov.w	r0, #0
 8004e96:	f380 8814 	msr	CONTROL, r0
 8004e9a:	b662      	cpsie	i
 8004e9c:	b661      	cpsie	f
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	df00      	svc	0
 8004ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004eaa:	bf00      	nop
 8004eac:	e000ed08 	.word	0xe000ed08

08004eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004eb6:	4b4e      	ldr	r3, [pc, #312]	; (8004ff0 <xPortStartScheduler+0x140>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a4e      	ldr	r2, [pc, #312]	; (8004ff4 <xPortStartScheduler+0x144>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d10a      	bne.n	8004ed6 <xPortStartScheduler+0x26>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	61bb      	str	r3, [r7, #24]
}
 8004ed2:	bf00      	nop
 8004ed4:	e7fe      	b.n	8004ed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ed6:	4b46      	ldr	r3, [pc, #280]	; (8004ff0 <xPortStartScheduler+0x140>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a47      	ldr	r2, [pc, #284]	; (8004ff8 <xPortStartScheduler+0x148>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d10a      	bne.n	8004ef6 <xPortStartScheduler+0x46>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	617b      	str	r3, [r7, #20]
}
 8004ef2:	bf00      	nop
 8004ef4:	e7fe      	b.n	8004ef4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ef6:	4b41      	ldr	r3, [pc, #260]	; (8004ffc <xPortStartScheduler+0x14c>)
 8004ef8:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	22ff      	movs	r2, #255	; 0xff
 8004f06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	4b39      	ldr	r3, [pc, #228]	; (8005000 <xPortStartScheduler+0x150>)
 8004f1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f1e:	4b39      	ldr	r3, [pc, #228]	; (8005004 <xPortStartScheduler+0x154>)
 8004f20:	2207      	movs	r2, #7
 8004f22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f24:	e009      	b.n	8004f3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004f26:	4b37      	ldr	r3, [pc, #220]	; (8005004 <xPortStartScheduler+0x154>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	4a35      	ldr	r2, [pc, #212]	; (8005004 <xPortStartScheduler+0x154>)
 8004f2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f42:	2b80      	cmp	r3, #128	; 0x80
 8004f44:	d0ef      	beq.n	8004f26 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8004f46:	4b2f      	ldr	r3, [pc, #188]	; (8005004 <xPortStartScheduler+0x154>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f1c3 0307 	rsb	r3, r3, #7
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d00a      	beq.n	8004f68 <xPortStartScheduler+0xb8>
	__asm volatile
 8004f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	613b      	str	r3, [r7, #16]
}
 8004f64:	bf00      	nop
 8004f66:	e7fe      	b.n	8004f66 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f68:	4b26      	ldr	r3, [pc, #152]	; (8005004 <xPortStartScheduler+0x154>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f1c3 0307 	rsb	r3, r3, #7
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d00a      	beq.n	8004f8a <xPortStartScheduler+0xda>
	__asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	60fb      	str	r3, [r7, #12]
}
 8004f86:	bf00      	nop
 8004f88:	e7fe      	b.n	8004f88 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f8a:	4b1e      	ldr	r3, [pc, #120]	; (8005004 <xPortStartScheduler+0x154>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	021b      	lsls	r3, r3, #8
 8004f90:	4a1c      	ldr	r2, [pc, #112]	; (8005004 <xPortStartScheduler+0x154>)
 8004f92:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f94:	4b1b      	ldr	r3, [pc, #108]	; (8005004 <xPortStartScheduler+0x154>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f9c:	4a19      	ldr	r2, [pc, #100]	; (8005004 <xPortStartScheduler+0x154>)
 8004f9e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fa8:	4b17      	ldr	r3, [pc, #92]	; (8005008 <xPortStartScheduler+0x158>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a16      	ldr	r2, [pc, #88]	; (8005008 <xPortStartScheduler+0x158>)
 8004fae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fb2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fb4:	4b14      	ldr	r3, [pc, #80]	; (8005008 <xPortStartScheduler+0x158>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a13      	ldr	r2, [pc, #76]	; (8005008 <xPortStartScheduler+0x158>)
 8004fba:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004fbe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fc0:	f000 f8dc 	bl	800517c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fc4:	4b11      	ldr	r3, [pc, #68]	; (800500c <xPortStartScheduler+0x15c>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004fca:	f000 f8fb 	bl	80051c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004fce:	4b10      	ldr	r3, [pc, #64]	; (8005010 <xPortStartScheduler+0x160>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a0f      	ldr	r2, [pc, #60]	; (8005010 <xPortStartScheduler+0x160>)
 8004fd4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004fd8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004fda:	f7ff ff55 	bl	8004e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004fde:	f7fe fdc3 	bl	8003b68 <vTaskSwitchContext>
	prvTaskExitError();
 8004fe2:	f7ff ff0f 	bl	8004e04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3720      	adds	r7, #32
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	e000ed00 	.word	0xe000ed00
 8004ff4:	410fc271 	.word	0x410fc271
 8004ff8:	410fc270 	.word	0x410fc270
 8004ffc:	e000e400 	.word	0xe000e400
 8005000:	20000370 	.word	0x20000370
 8005004:	20000374 	.word	0x20000374
 8005008:	e000ed20 	.word	0xe000ed20
 800500c:	2000000c 	.word	0x2000000c
 8005010:	e000ef34 	.word	0xe000ef34

08005014 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
	__asm volatile
 800501a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	607b      	str	r3, [r7, #4]
}
 800502c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800502e:	4b0f      	ldr	r3, [pc, #60]	; (800506c <vPortEnterCritical+0x58>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3301      	adds	r3, #1
 8005034:	4a0d      	ldr	r2, [pc, #52]	; (800506c <vPortEnterCritical+0x58>)
 8005036:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005038:	4b0c      	ldr	r3, [pc, #48]	; (800506c <vPortEnterCritical+0x58>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d10f      	bne.n	8005060 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005040:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <vPortEnterCritical+0x5c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <vPortEnterCritical+0x4c>
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	603b      	str	r3, [r7, #0]
}
 800505c:	bf00      	nop
 800505e:	e7fe      	b.n	800505e <vPortEnterCritical+0x4a>
	}
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	2000000c 	.word	0x2000000c
 8005070:	e000ed04 	.word	0xe000ed04

08005074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800507a:	4b12      	ldr	r3, [pc, #72]	; (80050c4 <vPortExitCritical+0x50>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10a      	bne.n	8005098 <vPortExitCritical+0x24>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	607b      	str	r3, [r7, #4]
}
 8005094:	bf00      	nop
 8005096:	e7fe      	b.n	8005096 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005098:	4b0a      	ldr	r3, [pc, #40]	; (80050c4 <vPortExitCritical+0x50>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3b01      	subs	r3, #1
 800509e:	4a09      	ldr	r2, [pc, #36]	; (80050c4 <vPortExitCritical+0x50>)
 80050a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050a2:	4b08      	ldr	r3, [pc, #32]	; (80050c4 <vPortExitCritical+0x50>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d105      	bne.n	80050b6 <vPortExitCritical+0x42>
 80050aa:	2300      	movs	r3, #0
 80050ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	f383 8811 	msr	BASEPRI, r3
}
 80050b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	2000000c 	.word	0x2000000c
	...

080050d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80050d0:	f3ef 8009 	mrs	r0, PSP
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	4b15      	ldr	r3, [pc, #84]	; (8005130 <pxCurrentTCBConst>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	f01e 0f10 	tst.w	lr, #16
 80050e0:	bf08      	it	eq
 80050e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80050e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ea:	6010      	str	r0, [r2, #0]
 80050ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80050f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80050f4:	f380 8811 	msr	BASEPRI, r0
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f7fe fd32 	bl	8003b68 <vTaskSwitchContext>
 8005104:	f04f 0000 	mov.w	r0, #0
 8005108:	f380 8811 	msr	BASEPRI, r0
 800510c:	bc09      	pop	{r0, r3}
 800510e:	6819      	ldr	r1, [r3, #0]
 8005110:	6808      	ldr	r0, [r1, #0]
 8005112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005116:	f01e 0f10 	tst.w	lr, #16
 800511a:	bf08      	it	eq
 800511c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005120:	f380 8809 	msr	PSP, r0
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	f3af 8000 	nop.w

08005130 <pxCurrentTCBConst>:
 8005130:	20000168 	.word	0x20000168
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop

08005138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	607b      	str	r3, [r7, #4]
}
 8005150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005152:	f7fe fc51 	bl	80039f8 <xTaskIncrementTick>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800515c:	4b06      	ldr	r3, [pc, #24]	; (8005178 <SysTick_Handler+0x40>)
 800515e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	2300      	movs	r3, #0
 8005166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	f383 8811 	msr	BASEPRI, r3
}
 800516e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	e000ed04 	.word	0xe000ed04

0800517c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <vPortSetupTimerInterrupt+0x34>)
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005186:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <vPortSetupTimerInterrupt+0x38>)
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800518c:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <vPortSetupTimerInterrupt+0x3c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a0a      	ldr	r2, [pc, #40]	; (80051bc <vPortSetupTimerInterrupt+0x40>)
 8005192:	fba2 2303 	umull	r2, r3, r2, r3
 8005196:	099b      	lsrs	r3, r3, #6
 8005198:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <vPortSetupTimerInterrupt+0x44>)
 800519a:	3b01      	subs	r3, #1
 800519c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800519e:	4b04      	ldr	r3, [pc, #16]	; (80051b0 <vPortSetupTimerInterrupt+0x34>)
 80051a0:	2207      	movs	r2, #7
 80051a2:	601a      	str	r2, [r3, #0]
}
 80051a4:	bf00      	nop
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	e000e010 	.word	0xe000e010
 80051b4:	e000e018 	.word	0xe000e018
 80051b8:	20000000 	.word	0x20000000
 80051bc:	10624dd3 	.word	0x10624dd3
 80051c0:	e000e014 	.word	0xe000e014

080051c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80051d4 <vPortEnableVFP+0x10>
 80051c8:	6801      	ldr	r1, [r0, #0]
 80051ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80051ce:	6001      	str	r1, [r0, #0]
 80051d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80051d2:	bf00      	nop
 80051d4:	e000ed88 	.word	0xe000ed88

080051d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80051de:	f3ef 8305 	mrs	r3, IPSR
 80051e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b0f      	cmp	r3, #15
 80051e8:	d914      	bls.n	8005214 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80051ea:	4a17      	ldr	r2, [pc, #92]	; (8005248 <vPortValidateInterruptPriority+0x70>)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80051f4:	4b15      	ldr	r3, [pc, #84]	; (800524c <vPortValidateInterruptPriority+0x74>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	7afa      	ldrb	r2, [r7, #11]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d20a      	bcs.n	8005214 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	607b      	str	r3, [r7, #4]
}
 8005210:	bf00      	nop
 8005212:	e7fe      	b.n	8005212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005214:	4b0e      	ldr	r3, [pc, #56]	; (8005250 <vPortValidateInterruptPriority+0x78>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800521c:	4b0d      	ldr	r3, [pc, #52]	; (8005254 <vPortValidateInterruptPriority+0x7c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	429a      	cmp	r2, r3
 8005222:	d90a      	bls.n	800523a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	603b      	str	r3, [r7, #0]
}
 8005236:	bf00      	nop
 8005238:	e7fe      	b.n	8005238 <vPortValidateInterruptPriority+0x60>
	}
 800523a:	bf00      	nop
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	e000e3f0 	.word	0xe000e3f0
 800524c:	20000370 	.word	0x20000370
 8005250:	e000ed0c 	.word	0xe000ed0c
 8005254:	20000374 	.word	0x20000374

08005258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08a      	sub	sp, #40	; 0x28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005264:	f7fe fb0e 	bl	8003884 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005268:	4b58      	ldr	r3, [pc, #352]	; (80053cc <pvPortMalloc+0x174>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005270:	f000 f910 	bl	8005494 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005274:	4b56      	ldr	r3, [pc, #344]	; (80053d0 <pvPortMalloc+0x178>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4013      	ands	r3, r2
 800527c:	2b00      	cmp	r3, #0
 800527e:	f040 808e 	bne.w	800539e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01d      	beq.n	80052c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005288:	2208      	movs	r2, #8
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4413      	add	r3, r2
 800528e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	2b00      	cmp	r3, #0
 8005298:	d014      	beq.n	80052c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f023 0307 	bic.w	r3, r3, #7
 80052a0:	3308      	adds	r3, #8
 80052a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <pvPortMalloc+0x6c>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	617b      	str	r3, [r7, #20]
}
 80052c0:	bf00      	nop
 80052c2:	e7fe      	b.n	80052c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d069      	beq.n	800539e <pvPortMalloc+0x146>
 80052ca:	4b42      	ldr	r3, [pc, #264]	; (80053d4 <pvPortMalloc+0x17c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d864      	bhi.n	800539e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052d4:	4b40      	ldr	r3, [pc, #256]	; (80053d8 <pvPortMalloc+0x180>)
 80052d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052d8:	4b3f      	ldr	r3, [pc, #252]	; (80053d8 <pvPortMalloc+0x180>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052de:	e004      	b.n	80052ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d903      	bls.n	80052fc <pvPortMalloc+0xa4>
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1f1      	bne.n	80052e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80052fc:	4b33      	ldr	r3, [pc, #204]	; (80053cc <pvPortMalloc+0x174>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005302:	429a      	cmp	r2, r3
 8005304:	d04b      	beq.n	800539e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2208      	movs	r2, #8
 800530c:	4413      	add	r3, r2
 800530e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	1ad2      	subs	r2, r2, r3
 8005320:	2308      	movs	r3, #8
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	429a      	cmp	r2, r3
 8005326:	d91f      	bls.n	8005368 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4413      	add	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <pvPortMalloc+0xf8>
	__asm volatile
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	613b      	str	r3, [r7, #16]
}
 800534c:	bf00      	nop
 800534e:	e7fe      	b.n	800534e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	1ad2      	subs	r2, r2, r3
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005362:	69b8      	ldr	r0, [r7, #24]
 8005364:	f000 f8f8 	bl	8005558 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005368:	4b1a      	ldr	r3, [pc, #104]	; (80053d4 <pvPortMalloc+0x17c>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	4a18      	ldr	r2, [pc, #96]	; (80053d4 <pvPortMalloc+0x17c>)
 8005374:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005376:	4b17      	ldr	r3, [pc, #92]	; (80053d4 <pvPortMalloc+0x17c>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	4b18      	ldr	r3, [pc, #96]	; (80053dc <pvPortMalloc+0x184>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d203      	bcs.n	800538a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005382:	4b14      	ldr	r3, [pc, #80]	; (80053d4 <pvPortMalloc+0x17c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a15      	ldr	r2, [pc, #84]	; (80053dc <pvPortMalloc+0x184>)
 8005388:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	4b10      	ldr	r3, [pc, #64]	; (80053d0 <pvPortMalloc+0x178>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	431a      	orrs	r2, r3
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800539e:	f7fe fa7f 	bl	80038a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <pvPortMalloc+0x16a>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	60fb      	str	r3, [r7, #12]
}
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <pvPortMalloc+0x168>
	return pvReturn;
 80053c2:	69fb      	ldr	r3, [r7, #28]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3728      	adds	r7, #40	; 0x28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	20012f80 	.word	0x20012f80
 80053d0:	20012f8c 	.word	0x20012f8c
 80053d4:	20012f84 	.word	0x20012f84
 80053d8:	20012f78 	.word	0x20012f78
 80053dc:	20012f88 	.word	0x20012f88

080053e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d048      	beq.n	8005484 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053f2:	2308      	movs	r3, #8
 80053f4:	425b      	negs	r3, r3
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4413      	add	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	4b21      	ldr	r3, [pc, #132]	; (800548c <vPortFree+0xac>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4013      	ands	r3, r2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <vPortFree+0x44>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	60fb      	str	r3, [r7, #12]
}
 8005420:	bf00      	nop
 8005422:	e7fe      	b.n	8005422 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00a      	beq.n	8005442 <vPortFree+0x62>
	__asm volatile
 800542c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	60bb      	str	r3, [r7, #8]
}
 800543e:	bf00      	nop
 8005440:	e7fe      	b.n	8005440 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	4b11      	ldr	r3, [pc, #68]	; (800548c <vPortFree+0xac>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4013      	ands	r3, r2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d019      	beq.n	8005484 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d115      	bne.n	8005484 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <vPortFree+0xac>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	43db      	mvns	r3, r3
 8005462:	401a      	ands	r2, r3
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005468:	f7fe fa0c 	bl	8003884 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	4b07      	ldr	r3, [pc, #28]	; (8005490 <vPortFree+0xb0>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4413      	add	r3, r2
 8005476:	4a06      	ldr	r2, [pc, #24]	; (8005490 <vPortFree+0xb0>)
 8005478:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800547a:	6938      	ldr	r0, [r7, #16]
 800547c:	f000 f86c 	bl	8005558 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005480:	f7fe fa0e 	bl	80038a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005484:	bf00      	nop
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20012f8c 	.word	0x20012f8c
 8005490:	20012f84 	.word	0x20012f84

08005494 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800549a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800549e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054a0:	4b27      	ldr	r3, [pc, #156]	; (8005540 <prvHeapInit+0xac>)
 80054a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00c      	beq.n	80054c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3307      	adds	r3, #7
 80054b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0307 	bic.w	r3, r3, #7
 80054ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	4a1f      	ldr	r2, [pc, #124]	; (8005540 <prvHeapInit+0xac>)
 80054c4:	4413      	add	r3, r2
 80054c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054cc:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <prvHeapInit+0xb0>)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054d2:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <prvHeapInit+0xb0>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	4413      	add	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80054e0:	2208      	movs	r2, #8
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0307 	bic.w	r3, r3, #7
 80054ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4a15      	ldr	r2, [pc, #84]	; (8005548 <prvHeapInit+0xb4>)
 80054f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80054f6:	4b14      	ldr	r3, [pc, #80]	; (8005548 <prvHeapInit+0xb4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2200      	movs	r2, #0
 80054fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80054fe:	4b12      	ldr	r3, [pc, #72]	; (8005548 <prvHeapInit+0xb4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	1ad2      	subs	r2, r2, r3
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005514:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <prvHeapInit+0xb4>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	4a0a      	ldr	r2, [pc, #40]	; (800554c <prvHeapInit+0xb8>)
 8005522:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	4a09      	ldr	r2, [pc, #36]	; (8005550 <prvHeapInit+0xbc>)
 800552a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800552c:	4b09      	ldr	r3, [pc, #36]	; (8005554 <prvHeapInit+0xc0>)
 800552e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005532:	601a      	str	r2, [r3, #0]
}
 8005534:	bf00      	nop
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	20000378 	.word	0x20000378
 8005544:	20012f78 	.word	0x20012f78
 8005548:	20012f80 	.word	0x20012f80
 800554c:	20012f88 	.word	0x20012f88
 8005550:	20012f84 	.word	0x20012f84
 8005554:	20012f8c 	.word	0x20012f8c

08005558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005560:	4b28      	ldr	r3, [pc, #160]	; (8005604 <prvInsertBlockIntoFreeList+0xac>)
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	e002      	b.n	800556c <prvInsertBlockIntoFreeList+0x14>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	429a      	cmp	r2, r3
 8005574:	d8f7      	bhi.n	8005566 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	4413      	add	r3, r2
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	429a      	cmp	r2, r3
 8005586:	d108      	bne.n	800559a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	441a      	add	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	441a      	add	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d118      	bne.n	80055e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	4b15      	ldr	r3, [pc, #84]	; (8005608 <prvInsertBlockIntoFreeList+0xb0>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d00d      	beq.n	80055d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	441a      	add	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	e008      	b.n	80055e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055d6:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <prvInsertBlockIntoFreeList+0xb0>)
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	e003      	b.n	80055e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d002      	beq.n	80055f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055f6:	bf00      	nop
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	20012f78 	.word	0x20012f78
 8005608:	20012f80 	.word	0x20012f80

0800560c <__errno>:
 800560c:	4b01      	ldr	r3, [pc, #4]	; (8005614 <__errno+0x8>)
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20000010 	.word	0x20000010

08005618 <__libc_init_array>:
 8005618:	b570      	push	{r4, r5, r6, lr}
 800561a:	4d0d      	ldr	r5, [pc, #52]	; (8005650 <__libc_init_array+0x38>)
 800561c:	4c0d      	ldr	r4, [pc, #52]	; (8005654 <__libc_init_array+0x3c>)
 800561e:	1b64      	subs	r4, r4, r5
 8005620:	10a4      	asrs	r4, r4, #2
 8005622:	2600      	movs	r6, #0
 8005624:	42a6      	cmp	r6, r4
 8005626:	d109      	bne.n	800563c <__libc_init_array+0x24>
 8005628:	4d0b      	ldr	r5, [pc, #44]	; (8005658 <__libc_init_array+0x40>)
 800562a:	4c0c      	ldr	r4, [pc, #48]	; (800565c <__libc_init_array+0x44>)
 800562c:	f000 fc9c 	bl	8005f68 <_init>
 8005630:	1b64      	subs	r4, r4, r5
 8005632:	10a4      	asrs	r4, r4, #2
 8005634:	2600      	movs	r6, #0
 8005636:	42a6      	cmp	r6, r4
 8005638:	d105      	bne.n	8005646 <__libc_init_array+0x2e>
 800563a:	bd70      	pop	{r4, r5, r6, pc}
 800563c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005640:	4798      	blx	r3
 8005642:	3601      	adds	r6, #1
 8005644:	e7ee      	b.n	8005624 <__libc_init_array+0xc>
 8005646:	f855 3b04 	ldr.w	r3, [r5], #4
 800564a:	4798      	blx	r3
 800564c:	3601      	adds	r6, #1
 800564e:	e7f2      	b.n	8005636 <__libc_init_array+0x1e>
 8005650:	080060d0 	.word	0x080060d0
 8005654:	080060d0 	.word	0x080060d0
 8005658:	080060d0 	.word	0x080060d0
 800565c:	080060d4 	.word	0x080060d4

08005660 <memcpy>:
 8005660:	440a      	add	r2, r1
 8005662:	4291      	cmp	r1, r2
 8005664:	f100 33ff 	add.w	r3, r0, #4294967295
 8005668:	d100      	bne.n	800566c <memcpy+0xc>
 800566a:	4770      	bx	lr
 800566c:	b510      	push	{r4, lr}
 800566e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005672:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005676:	4291      	cmp	r1, r2
 8005678:	d1f9      	bne.n	800566e <memcpy+0xe>
 800567a:	bd10      	pop	{r4, pc}

0800567c <memset>:
 800567c:	4402      	add	r2, r0
 800567e:	4603      	mov	r3, r0
 8005680:	4293      	cmp	r3, r2
 8005682:	d100      	bne.n	8005686 <memset+0xa>
 8005684:	4770      	bx	lr
 8005686:	f803 1b01 	strb.w	r1, [r3], #1
 800568a:	e7f9      	b.n	8005680 <memset+0x4>

0800568c <siprintf>:
 800568c:	b40e      	push	{r1, r2, r3}
 800568e:	b500      	push	{lr}
 8005690:	b09c      	sub	sp, #112	; 0x70
 8005692:	ab1d      	add	r3, sp, #116	; 0x74
 8005694:	9002      	str	r0, [sp, #8]
 8005696:	9006      	str	r0, [sp, #24]
 8005698:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800569c:	4809      	ldr	r0, [pc, #36]	; (80056c4 <siprintf+0x38>)
 800569e:	9107      	str	r1, [sp, #28]
 80056a0:	9104      	str	r1, [sp, #16]
 80056a2:	4909      	ldr	r1, [pc, #36]	; (80056c8 <siprintf+0x3c>)
 80056a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80056a8:	9105      	str	r1, [sp, #20]
 80056aa:	6800      	ldr	r0, [r0, #0]
 80056ac:	9301      	str	r3, [sp, #4]
 80056ae:	a902      	add	r1, sp, #8
 80056b0:	f000 f876 	bl	80057a0 <_svfiprintf_r>
 80056b4:	9b02      	ldr	r3, [sp, #8]
 80056b6:	2200      	movs	r2, #0
 80056b8:	701a      	strb	r2, [r3, #0]
 80056ba:	b01c      	add	sp, #112	; 0x70
 80056bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80056c0:	b003      	add	sp, #12
 80056c2:	4770      	bx	lr
 80056c4:	20000010 	.word	0x20000010
 80056c8:	ffff0208 	.word	0xffff0208

080056cc <strcat>:
 80056cc:	b510      	push	{r4, lr}
 80056ce:	4602      	mov	r2, r0
 80056d0:	7814      	ldrb	r4, [r2, #0]
 80056d2:	4613      	mov	r3, r2
 80056d4:	3201      	adds	r2, #1
 80056d6:	2c00      	cmp	r4, #0
 80056d8:	d1fa      	bne.n	80056d0 <strcat+0x4>
 80056da:	3b01      	subs	r3, #1
 80056dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056e4:	2a00      	cmp	r2, #0
 80056e6:	d1f9      	bne.n	80056dc <strcat+0x10>
 80056e8:	bd10      	pop	{r4, pc}

080056ea <__ssputs_r>:
 80056ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ee:	688e      	ldr	r6, [r1, #8]
 80056f0:	429e      	cmp	r6, r3
 80056f2:	4682      	mov	sl, r0
 80056f4:	460c      	mov	r4, r1
 80056f6:	4690      	mov	r8, r2
 80056f8:	461f      	mov	r7, r3
 80056fa:	d838      	bhi.n	800576e <__ssputs_r+0x84>
 80056fc:	898a      	ldrh	r2, [r1, #12]
 80056fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005702:	d032      	beq.n	800576a <__ssputs_r+0x80>
 8005704:	6825      	ldr	r5, [r4, #0]
 8005706:	6909      	ldr	r1, [r1, #16]
 8005708:	eba5 0901 	sub.w	r9, r5, r1
 800570c:	6965      	ldr	r5, [r4, #20]
 800570e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005712:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005716:	3301      	adds	r3, #1
 8005718:	444b      	add	r3, r9
 800571a:	106d      	asrs	r5, r5, #1
 800571c:	429d      	cmp	r5, r3
 800571e:	bf38      	it	cc
 8005720:	461d      	movcc	r5, r3
 8005722:	0553      	lsls	r3, r2, #21
 8005724:	d531      	bpl.n	800578a <__ssputs_r+0xa0>
 8005726:	4629      	mov	r1, r5
 8005728:	f000 fb54 	bl	8005dd4 <_malloc_r>
 800572c:	4606      	mov	r6, r0
 800572e:	b950      	cbnz	r0, 8005746 <__ssputs_r+0x5c>
 8005730:	230c      	movs	r3, #12
 8005732:	f8ca 3000 	str.w	r3, [sl]
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800573c:	81a3      	strh	r3, [r4, #12]
 800573e:	f04f 30ff 	mov.w	r0, #4294967295
 8005742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005746:	6921      	ldr	r1, [r4, #16]
 8005748:	464a      	mov	r2, r9
 800574a:	f7ff ff89 	bl	8005660 <memcpy>
 800574e:	89a3      	ldrh	r3, [r4, #12]
 8005750:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005758:	81a3      	strh	r3, [r4, #12]
 800575a:	6126      	str	r6, [r4, #16]
 800575c:	6165      	str	r5, [r4, #20]
 800575e:	444e      	add	r6, r9
 8005760:	eba5 0509 	sub.w	r5, r5, r9
 8005764:	6026      	str	r6, [r4, #0]
 8005766:	60a5      	str	r5, [r4, #8]
 8005768:	463e      	mov	r6, r7
 800576a:	42be      	cmp	r6, r7
 800576c:	d900      	bls.n	8005770 <__ssputs_r+0x86>
 800576e:	463e      	mov	r6, r7
 8005770:	6820      	ldr	r0, [r4, #0]
 8005772:	4632      	mov	r2, r6
 8005774:	4641      	mov	r1, r8
 8005776:	f000 faa7 	bl	8005cc8 <memmove>
 800577a:	68a3      	ldr	r3, [r4, #8]
 800577c:	1b9b      	subs	r3, r3, r6
 800577e:	60a3      	str	r3, [r4, #8]
 8005780:	6823      	ldr	r3, [r4, #0]
 8005782:	4433      	add	r3, r6
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	2000      	movs	r0, #0
 8005788:	e7db      	b.n	8005742 <__ssputs_r+0x58>
 800578a:	462a      	mov	r2, r5
 800578c:	f000 fb96 	bl	8005ebc <_realloc_r>
 8005790:	4606      	mov	r6, r0
 8005792:	2800      	cmp	r0, #0
 8005794:	d1e1      	bne.n	800575a <__ssputs_r+0x70>
 8005796:	6921      	ldr	r1, [r4, #16]
 8005798:	4650      	mov	r0, sl
 800579a:	f000 faaf 	bl	8005cfc <_free_r>
 800579e:	e7c7      	b.n	8005730 <__ssputs_r+0x46>

080057a0 <_svfiprintf_r>:
 80057a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a4:	4698      	mov	r8, r3
 80057a6:	898b      	ldrh	r3, [r1, #12]
 80057a8:	061b      	lsls	r3, r3, #24
 80057aa:	b09d      	sub	sp, #116	; 0x74
 80057ac:	4607      	mov	r7, r0
 80057ae:	460d      	mov	r5, r1
 80057b0:	4614      	mov	r4, r2
 80057b2:	d50e      	bpl.n	80057d2 <_svfiprintf_r+0x32>
 80057b4:	690b      	ldr	r3, [r1, #16]
 80057b6:	b963      	cbnz	r3, 80057d2 <_svfiprintf_r+0x32>
 80057b8:	2140      	movs	r1, #64	; 0x40
 80057ba:	f000 fb0b 	bl	8005dd4 <_malloc_r>
 80057be:	6028      	str	r0, [r5, #0]
 80057c0:	6128      	str	r0, [r5, #16]
 80057c2:	b920      	cbnz	r0, 80057ce <_svfiprintf_r+0x2e>
 80057c4:	230c      	movs	r3, #12
 80057c6:	603b      	str	r3, [r7, #0]
 80057c8:	f04f 30ff 	mov.w	r0, #4294967295
 80057cc:	e0d1      	b.n	8005972 <_svfiprintf_r+0x1d2>
 80057ce:	2340      	movs	r3, #64	; 0x40
 80057d0:	616b      	str	r3, [r5, #20]
 80057d2:	2300      	movs	r3, #0
 80057d4:	9309      	str	r3, [sp, #36]	; 0x24
 80057d6:	2320      	movs	r3, #32
 80057d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80057e0:	2330      	movs	r3, #48	; 0x30
 80057e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800598c <_svfiprintf_r+0x1ec>
 80057e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057ea:	f04f 0901 	mov.w	r9, #1
 80057ee:	4623      	mov	r3, r4
 80057f0:	469a      	mov	sl, r3
 80057f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057f6:	b10a      	cbz	r2, 80057fc <_svfiprintf_r+0x5c>
 80057f8:	2a25      	cmp	r2, #37	; 0x25
 80057fa:	d1f9      	bne.n	80057f0 <_svfiprintf_r+0x50>
 80057fc:	ebba 0b04 	subs.w	fp, sl, r4
 8005800:	d00b      	beq.n	800581a <_svfiprintf_r+0x7a>
 8005802:	465b      	mov	r3, fp
 8005804:	4622      	mov	r2, r4
 8005806:	4629      	mov	r1, r5
 8005808:	4638      	mov	r0, r7
 800580a:	f7ff ff6e 	bl	80056ea <__ssputs_r>
 800580e:	3001      	adds	r0, #1
 8005810:	f000 80aa 	beq.w	8005968 <_svfiprintf_r+0x1c8>
 8005814:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005816:	445a      	add	r2, fp
 8005818:	9209      	str	r2, [sp, #36]	; 0x24
 800581a:	f89a 3000 	ldrb.w	r3, [sl]
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 80a2 	beq.w	8005968 <_svfiprintf_r+0x1c8>
 8005824:	2300      	movs	r3, #0
 8005826:	f04f 32ff 	mov.w	r2, #4294967295
 800582a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800582e:	f10a 0a01 	add.w	sl, sl, #1
 8005832:	9304      	str	r3, [sp, #16]
 8005834:	9307      	str	r3, [sp, #28]
 8005836:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800583a:	931a      	str	r3, [sp, #104]	; 0x68
 800583c:	4654      	mov	r4, sl
 800583e:	2205      	movs	r2, #5
 8005840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005844:	4851      	ldr	r0, [pc, #324]	; (800598c <_svfiprintf_r+0x1ec>)
 8005846:	f7fa fccb 	bl	80001e0 <memchr>
 800584a:	9a04      	ldr	r2, [sp, #16]
 800584c:	b9d8      	cbnz	r0, 8005886 <_svfiprintf_r+0xe6>
 800584e:	06d0      	lsls	r0, r2, #27
 8005850:	bf44      	itt	mi
 8005852:	2320      	movmi	r3, #32
 8005854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005858:	0711      	lsls	r1, r2, #28
 800585a:	bf44      	itt	mi
 800585c:	232b      	movmi	r3, #43	; 0x2b
 800585e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005862:	f89a 3000 	ldrb.w	r3, [sl]
 8005866:	2b2a      	cmp	r3, #42	; 0x2a
 8005868:	d015      	beq.n	8005896 <_svfiprintf_r+0xf6>
 800586a:	9a07      	ldr	r2, [sp, #28]
 800586c:	4654      	mov	r4, sl
 800586e:	2000      	movs	r0, #0
 8005870:	f04f 0c0a 	mov.w	ip, #10
 8005874:	4621      	mov	r1, r4
 8005876:	f811 3b01 	ldrb.w	r3, [r1], #1
 800587a:	3b30      	subs	r3, #48	; 0x30
 800587c:	2b09      	cmp	r3, #9
 800587e:	d94e      	bls.n	800591e <_svfiprintf_r+0x17e>
 8005880:	b1b0      	cbz	r0, 80058b0 <_svfiprintf_r+0x110>
 8005882:	9207      	str	r2, [sp, #28]
 8005884:	e014      	b.n	80058b0 <_svfiprintf_r+0x110>
 8005886:	eba0 0308 	sub.w	r3, r0, r8
 800588a:	fa09 f303 	lsl.w	r3, r9, r3
 800588e:	4313      	orrs	r3, r2
 8005890:	9304      	str	r3, [sp, #16]
 8005892:	46a2      	mov	sl, r4
 8005894:	e7d2      	b.n	800583c <_svfiprintf_r+0x9c>
 8005896:	9b03      	ldr	r3, [sp, #12]
 8005898:	1d19      	adds	r1, r3, #4
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	9103      	str	r1, [sp, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	bfbb      	ittet	lt
 80058a2:	425b      	neglt	r3, r3
 80058a4:	f042 0202 	orrlt.w	r2, r2, #2
 80058a8:	9307      	strge	r3, [sp, #28]
 80058aa:	9307      	strlt	r3, [sp, #28]
 80058ac:	bfb8      	it	lt
 80058ae:	9204      	strlt	r2, [sp, #16]
 80058b0:	7823      	ldrb	r3, [r4, #0]
 80058b2:	2b2e      	cmp	r3, #46	; 0x2e
 80058b4:	d10c      	bne.n	80058d0 <_svfiprintf_r+0x130>
 80058b6:	7863      	ldrb	r3, [r4, #1]
 80058b8:	2b2a      	cmp	r3, #42	; 0x2a
 80058ba:	d135      	bne.n	8005928 <_svfiprintf_r+0x188>
 80058bc:	9b03      	ldr	r3, [sp, #12]
 80058be:	1d1a      	adds	r2, r3, #4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	9203      	str	r2, [sp, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	bfb8      	it	lt
 80058c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80058cc:	3402      	adds	r4, #2
 80058ce:	9305      	str	r3, [sp, #20]
 80058d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800599c <_svfiprintf_r+0x1fc>
 80058d4:	7821      	ldrb	r1, [r4, #0]
 80058d6:	2203      	movs	r2, #3
 80058d8:	4650      	mov	r0, sl
 80058da:	f7fa fc81 	bl	80001e0 <memchr>
 80058de:	b140      	cbz	r0, 80058f2 <_svfiprintf_r+0x152>
 80058e0:	2340      	movs	r3, #64	; 0x40
 80058e2:	eba0 000a 	sub.w	r0, r0, sl
 80058e6:	fa03 f000 	lsl.w	r0, r3, r0
 80058ea:	9b04      	ldr	r3, [sp, #16]
 80058ec:	4303      	orrs	r3, r0
 80058ee:	3401      	adds	r4, #1
 80058f0:	9304      	str	r3, [sp, #16]
 80058f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058f6:	4826      	ldr	r0, [pc, #152]	; (8005990 <_svfiprintf_r+0x1f0>)
 80058f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058fc:	2206      	movs	r2, #6
 80058fe:	f7fa fc6f 	bl	80001e0 <memchr>
 8005902:	2800      	cmp	r0, #0
 8005904:	d038      	beq.n	8005978 <_svfiprintf_r+0x1d8>
 8005906:	4b23      	ldr	r3, [pc, #140]	; (8005994 <_svfiprintf_r+0x1f4>)
 8005908:	bb1b      	cbnz	r3, 8005952 <_svfiprintf_r+0x1b2>
 800590a:	9b03      	ldr	r3, [sp, #12]
 800590c:	3307      	adds	r3, #7
 800590e:	f023 0307 	bic.w	r3, r3, #7
 8005912:	3308      	adds	r3, #8
 8005914:	9303      	str	r3, [sp, #12]
 8005916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005918:	4433      	add	r3, r6
 800591a:	9309      	str	r3, [sp, #36]	; 0x24
 800591c:	e767      	b.n	80057ee <_svfiprintf_r+0x4e>
 800591e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005922:	460c      	mov	r4, r1
 8005924:	2001      	movs	r0, #1
 8005926:	e7a5      	b.n	8005874 <_svfiprintf_r+0xd4>
 8005928:	2300      	movs	r3, #0
 800592a:	3401      	adds	r4, #1
 800592c:	9305      	str	r3, [sp, #20]
 800592e:	4619      	mov	r1, r3
 8005930:	f04f 0c0a 	mov.w	ip, #10
 8005934:	4620      	mov	r0, r4
 8005936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800593a:	3a30      	subs	r2, #48	; 0x30
 800593c:	2a09      	cmp	r2, #9
 800593e:	d903      	bls.n	8005948 <_svfiprintf_r+0x1a8>
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0c5      	beq.n	80058d0 <_svfiprintf_r+0x130>
 8005944:	9105      	str	r1, [sp, #20]
 8005946:	e7c3      	b.n	80058d0 <_svfiprintf_r+0x130>
 8005948:	fb0c 2101 	mla	r1, ip, r1, r2
 800594c:	4604      	mov	r4, r0
 800594e:	2301      	movs	r3, #1
 8005950:	e7f0      	b.n	8005934 <_svfiprintf_r+0x194>
 8005952:	ab03      	add	r3, sp, #12
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	462a      	mov	r2, r5
 8005958:	4b0f      	ldr	r3, [pc, #60]	; (8005998 <_svfiprintf_r+0x1f8>)
 800595a:	a904      	add	r1, sp, #16
 800595c:	4638      	mov	r0, r7
 800595e:	f3af 8000 	nop.w
 8005962:	1c42      	adds	r2, r0, #1
 8005964:	4606      	mov	r6, r0
 8005966:	d1d6      	bne.n	8005916 <_svfiprintf_r+0x176>
 8005968:	89ab      	ldrh	r3, [r5, #12]
 800596a:	065b      	lsls	r3, r3, #25
 800596c:	f53f af2c 	bmi.w	80057c8 <_svfiprintf_r+0x28>
 8005970:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005972:	b01d      	add	sp, #116	; 0x74
 8005974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005978:	ab03      	add	r3, sp, #12
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	462a      	mov	r2, r5
 800597e:	4b06      	ldr	r3, [pc, #24]	; (8005998 <_svfiprintf_r+0x1f8>)
 8005980:	a904      	add	r1, sp, #16
 8005982:	4638      	mov	r0, r7
 8005984:	f000 f87a 	bl	8005a7c <_printf_i>
 8005988:	e7eb      	b.n	8005962 <_svfiprintf_r+0x1c2>
 800598a:	bf00      	nop
 800598c:	08006094 	.word	0x08006094
 8005990:	0800609e 	.word	0x0800609e
 8005994:	00000000 	.word	0x00000000
 8005998:	080056eb 	.word	0x080056eb
 800599c:	0800609a 	.word	0x0800609a

080059a0 <_printf_common>:
 80059a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059a4:	4616      	mov	r6, r2
 80059a6:	4699      	mov	r9, r3
 80059a8:	688a      	ldr	r2, [r1, #8]
 80059aa:	690b      	ldr	r3, [r1, #16]
 80059ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059b0:	4293      	cmp	r3, r2
 80059b2:	bfb8      	it	lt
 80059b4:	4613      	movlt	r3, r2
 80059b6:	6033      	str	r3, [r6, #0]
 80059b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059bc:	4607      	mov	r7, r0
 80059be:	460c      	mov	r4, r1
 80059c0:	b10a      	cbz	r2, 80059c6 <_printf_common+0x26>
 80059c2:	3301      	adds	r3, #1
 80059c4:	6033      	str	r3, [r6, #0]
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	0699      	lsls	r1, r3, #26
 80059ca:	bf42      	ittt	mi
 80059cc:	6833      	ldrmi	r3, [r6, #0]
 80059ce:	3302      	addmi	r3, #2
 80059d0:	6033      	strmi	r3, [r6, #0]
 80059d2:	6825      	ldr	r5, [r4, #0]
 80059d4:	f015 0506 	ands.w	r5, r5, #6
 80059d8:	d106      	bne.n	80059e8 <_printf_common+0x48>
 80059da:	f104 0a19 	add.w	sl, r4, #25
 80059de:	68e3      	ldr	r3, [r4, #12]
 80059e0:	6832      	ldr	r2, [r6, #0]
 80059e2:	1a9b      	subs	r3, r3, r2
 80059e4:	42ab      	cmp	r3, r5
 80059e6:	dc26      	bgt.n	8005a36 <_printf_common+0x96>
 80059e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059ec:	1e13      	subs	r3, r2, #0
 80059ee:	6822      	ldr	r2, [r4, #0]
 80059f0:	bf18      	it	ne
 80059f2:	2301      	movne	r3, #1
 80059f4:	0692      	lsls	r2, r2, #26
 80059f6:	d42b      	bmi.n	8005a50 <_printf_common+0xb0>
 80059f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059fc:	4649      	mov	r1, r9
 80059fe:	4638      	mov	r0, r7
 8005a00:	47c0      	blx	r8
 8005a02:	3001      	adds	r0, #1
 8005a04:	d01e      	beq.n	8005a44 <_printf_common+0xa4>
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	68e5      	ldr	r5, [r4, #12]
 8005a0a:	6832      	ldr	r2, [r6, #0]
 8005a0c:	f003 0306 	and.w	r3, r3, #6
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	bf08      	it	eq
 8005a14:	1aad      	subeq	r5, r5, r2
 8005a16:	68a3      	ldr	r3, [r4, #8]
 8005a18:	6922      	ldr	r2, [r4, #16]
 8005a1a:	bf0c      	ite	eq
 8005a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a20:	2500      	movne	r5, #0
 8005a22:	4293      	cmp	r3, r2
 8005a24:	bfc4      	itt	gt
 8005a26:	1a9b      	subgt	r3, r3, r2
 8005a28:	18ed      	addgt	r5, r5, r3
 8005a2a:	2600      	movs	r6, #0
 8005a2c:	341a      	adds	r4, #26
 8005a2e:	42b5      	cmp	r5, r6
 8005a30:	d11a      	bne.n	8005a68 <_printf_common+0xc8>
 8005a32:	2000      	movs	r0, #0
 8005a34:	e008      	b.n	8005a48 <_printf_common+0xa8>
 8005a36:	2301      	movs	r3, #1
 8005a38:	4652      	mov	r2, sl
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	4638      	mov	r0, r7
 8005a3e:	47c0      	blx	r8
 8005a40:	3001      	adds	r0, #1
 8005a42:	d103      	bne.n	8005a4c <_printf_common+0xac>
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295
 8005a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a4c:	3501      	adds	r5, #1
 8005a4e:	e7c6      	b.n	80059de <_printf_common+0x3e>
 8005a50:	18e1      	adds	r1, r4, r3
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	2030      	movs	r0, #48	; 0x30
 8005a56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a5a:	4422      	add	r2, r4
 8005a5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a64:	3302      	adds	r3, #2
 8005a66:	e7c7      	b.n	80059f8 <_printf_common+0x58>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	4622      	mov	r2, r4
 8005a6c:	4649      	mov	r1, r9
 8005a6e:	4638      	mov	r0, r7
 8005a70:	47c0      	blx	r8
 8005a72:	3001      	adds	r0, #1
 8005a74:	d0e6      	beq.n	8005a44 <_printf_common+0xa4>
 8005a76:	3601      	adds	r6, #1
 8005a78:	e7d9      	b.n	8005a2e <_printf_common+0x8e>
	...

08005a7c <_printf_i>:
 8005a7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a80:	7e0f      	ldrb	r7, [r1, #24]
 8005a82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a84:	2f78      	cmp	r7, #120	; 0x78
 8005a86:	4691      	mov	r9, r2
 8005a88:	4680      	mov	r8, r0
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	469a      	mov	sl, r3
 8005a8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a92:	d807      	bhi.n	8005aa4 <_printf_i+0x28>
 8005a94:	2f62      	cmp	r7, #98	; 0x62
 8005a96:	d80a      	bhi.n	8005aae <_printf_i+0x32>
 8005a98:	2f00      	cmp	r7, #0
 8005a9a:	f000 80d8 	beq.w	8005c4e <_printf_i+0x1d2>
 8005a9e:	2f58      	cmp	r7, #88	; 0x58
 8005aa0:	f000 80a3 	beq.w	8005bea <_printf_i+0x16e>
 8005aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005aac:	e03a      	b.n	8005b24 <_printf_i+0xa8>
 8005aae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ab2:	2b15      	cmp	r3, #21
 8005ab4:	d8f6      	bhi.n	8005aa4 <_printf_i+0x28>
 8005ab6:	a101      	add	r1, pc, #4	; (adr r1, 8005abc <_printf_i+0x40>)
 8005ab8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005abc:	08005b15 	.word	0x08005b15
 8005ac0:	08005b29 	.word	0x08005b29
 8005ac4:	08005aa5 	.word	0x08005aa5
 8005ac8:	08005aa5 	.word	0x08005aa5
 8005acc:	08005aa5 	.word	0x08005aa5
 8005ad0:	08005aa5 	.word	0x08005aa5
 8005ad4:	08005b29 	.word	0x08005b29
 8005ad8:	08005aa5 	.word	0x08005aa5
 8005adc:	08005aa5 	.word	0x08005aa5
 8005ae0:	08005aa5 	.word	0x08005aa5
 8005ae4:	08005aa5 	.word	0x08005aa5
 8005ae8:	08005c35 	.word	0x08005c35
 8005aec:	08005b59 	.word	0x08005b59
 8005af0:	08005c17 	.word	0x08005c17
 8005af4:	08005aa5 	.word	0x08005aa5
 8005af8:	08005aa5 	.word	0x08005aa5
 8005afc:	08005c57 	.word	0x08005c57
 8005b00:	08005aa5 	.word	0x08005aa5
 8005b04:	08005b59 	.word	0x08005b59
 8005b08:	08005aa5 	.word	0x08005aa5
 8005b0c:	08005aa5 	.word	0x08005aa5
 8005b10:	08005c1f 	.word	0x08005c1f
 8005b14:	682b      	ldr	r3, [r5, #0]
 8005b16:	1d1a      	adds	r2, r3, #4
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	602a      	str	r2, [r5, #0]
 8005b1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b24:	2301      	movs	r3, #1
 8005b26:	e0a3      	b.n	8005c70 <_printf_i+0x1f4>
 8005b28:	6820      	ldr	r0, [r4, #0]
 8005b2a:	6829      	ldr	r1, [r5, #0]
 8005b2c:	0606      	lsls	r6, r0, #24
 8005b2e:	f101 0304 	add.w	r3, r1, #4
 8005b32:	d50a      	bpl.n	8005b4a <_printf_i+0xce>
 8005b34:	680e      	ldr	r6, [r1, #0]
 8005b36:	602b      	str	r3, [r5, #0]
 8005b38:	2e00      	cmp	r6, #0
 8005b3a:	da03      	bge.n	8005b44 <_printf_i+0xc8>
 8005b3c:	232d      	movs	r3, #45	; 0x2d
 8005b3e:	4276      	negs	r6, r6
 8005b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b44:	485e      	ldr	r0, [pc, #376]	; (8005cc0 <_printf_i+0x244>)
 8005b46:	230a      	movs	r3, #10
 8005b48:	e019      	b.n	8005b7e <_printf_i+0x102>
 8005b4a:	680e      	ldr	r6, [r1, #0]
 8005b4c:	602b      	str	r3, [r5, #0]
 8005b4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b52:	bf18      	it	ne
 8005b54:	b236      	sxthne	r6, r6
 8005b56:	e7ef      	b.n	8005b38 <_printf_i+0xbc>
 8005b58:	682b      	ldr	r3, [r5, #0]
 8005b5a:	6820      	ldr	r0, [r4, #0]
 8005b5c:	1d19      	adds	r1, r3, #4
 8005b5e:	6029      	str	r1, [r5, #0]
 8005b60:	0601      	lsls	r1, r0, #24
 8005b62:	d501      	bpl.n	8005b68 <_printf_i+0xec>
 8005b64:	681e      	ldr	r6, [r3, #0]
 8005b66:	e002      	b.n	8005b6e <_printf_i+0xf2>
 8005b68:	0646      	lsls	r6, r0, #25
 8005b6a:	d5fb      	bpl.n	8005b64 <_printf_i+0xe8>
 8005b6c:	881e      	ldrh	r6, [r3, #0]
 8005b6e:	4854      	ldr	r0, [pc, #336]	; (8005cc0 <_printf_i+0x244>)
 8005b70:	2f6f      	cmp	r7, #111	; 0x6f
 8005b72:	bf0c      	ite	eq
 8005b74:	2308      	moveq	r3, #8
 8005b76:	230a      	movne	r3, #10
 8005b78:	2100      	movs	r1, #0
 8005b7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b7e:	6865      	ldr	r5, [r4, #4]
 8005b80:	60a5      	str	r5, [r4, #8]
 8005b82:	2d00      	cmp	r5, #0
 8005b84:	bfa2      	ittt	ge
 8005b86:	6821      	ldrge	r1, [r4, #0]
 8005b88:	f021 0104 	bicge.w	r1, r1, #4
 8005b8c:	6021      	strge	r1, [r4, #0]
 8005b8e:	b90e      	cbnz	r6, 8005b94 <_printf_i+0x118>
 8005b90:	2d00      	cmp	r5, #0
 8005b92:	d04d      	beq.n	8005c30 <_printf_i+0x1b4>
 8005b94:	4615      	mov	r5, r2
 8005b96:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b9a:	fb03 6711 	mls	r7, r3, r1, r6
 8005b9e:	5dc7      	ldrb	r7, [r0, r7]
 8005ba0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ba4:	4637      	mov	r7, r6
 8005ba6:	42bb      	cmp	r3, r7
 8005ba8:	460e      	mov	r6, r1
 8005baa:	d9f4      	bls.n	8005b96 <_printf_i+0x11a>
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d10b      	bne.n	8005bc8 <_printf_i+0x14c>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	07de      	lsls	r6, r3, #31
 8005bb4:	d508      	bpl.n	8005bc8 <_printf_i+0x14c>
 8005bb6:	6923      	ldr	r3, [r4, #16]
 8005bb8:	6861      	ldr	r1, [r4, #4]
 8005bba:	4299      	cmp	r1, r3
 8005bbc:	bfde      	ittt	le
 8005bbe:	2330      	movle	r3, #48	; 0x30
 8005bc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bc8:	1b52      	subs	r2, r2, r5
 8005bca:	6122      	str	r2, [r4, #16]
 8005bcc:	f8cd a000 	str.w	sl, [sp]
 8005bd0:	464b      	mov	r3, r9
 8005bd2:	aa03      	add	r2, sp, #12
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	4640      	mov	r0, r8
 8005bd8:	f7ff fee2 	bl	80059a0 <_printf_common>
 8005bdc:	3001      	adds	r0, #1
 8005bde:	d14c      	bne.n	8005c7a <_printf_i+0x1fe>
 8005be0:	f04f 30ff 	mov.w	r0, #4294967295
 8005be4:	b004      	add	sp, #16
 8005be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bea:	4835      	ldr	r0, [pc, #212]	; (8005cc0 <_printf_i+0x244>)
 8005bec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005bf0:	6829      	ldr	r1, [r5, #0]
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005bf8:	6029      	str	r1, [r5, #0]
 8005bfa:	061d      	lsls	r5, r3, #24
 8005bfc:	d514      	bpl.n	8005c28 <_printf_i+0x1ac>
 8005bfe:	07df      	lsls	r7, r3, #31
 8005c00:	bf44      	itt	mi
 8005c02:	f043 0320 	orrmi.w	r3, r3, #32
 8005c06:	6023      	strmi	r3, [r4, #0]
 8005c08:	b91e      	cbnz	r6, 8005c12 <_printf_i+0x196>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	f023 0320 	bic.w	r3, r3, #32
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	2310      	movs	r3, #16
 8005c14:	e7b0      	b.n	8005b78 <_printf_i+0xfc>
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	f043 0320 	orr.w	r3, r3, #32
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	2378      	movs	r3, #120	; 0x78
 8005c20:	4828      	ldr	r0, [pc, #160]	; (8005cc4 <_printf_i+0x248>)
 8005c22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c26:	e7e3      	b.n	8005bf0 <_printf_i+0x174>
 8005c28:	0659      	lsls	r1, r3, #25
 8005c2a:	bf48      	it	mi
 8005c2c:	b2b6      	uxthmi	r6, r6
 8005c2e:	e7e6      	b.n	8005bfe <_printf_i+0x182>
 8005c30:	4615      	mov	r5, r2
 8005c32:	e7bb      	b.n	8005bac <_printf_i+0x130>
 8005c34:	682b      	ldr	r3, [r5, #0]
 8005c36:	6826      	ldr	r6, [r4, #0]
 8005c38:	6961      	ldr	r1, [r4, #20]
 8005c3a:	1d18      	adds	r0, r3, #4
 8005c3c:	6028      	str	r0, [r5, #0]
 8005c3e:	0635      	lsls	r5, r6, #24
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	d501      	bpl.n	8005c48 <_printf_i+0x1cc>
 8005c44:	6019      	str	r1, [r3, #0]
 8005c46:	e002      	b.n	8005c4e <_printf_i+0x1d2>
 8005c48:	0670      	lsls	r0, r6, #25
 8005c4a:	d5fb      	bpl.n	8005c44 <_printf_i+0x1c8>
 8005c4c:	8019      	strh	r1, [r3, #0]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	6123      	str	r3, [r4, #16]
 8005c52:	4615      	mov	r5, r2
 8005c54:	e7ba      	b.n	8005bcc <_printf_i+0x150>
 8005c56:	682b      	ldr	r3, [r5, #0]
 8005c58:	1d1a      	adds	r2, r3, #4
 8005c5a:	602a      	str	r2, [r5, #0]
 8005c5c:	681d      	ldr	r5, [r3, #0]
 8005c5e:	6862      	ldr	r2, [r4, #4]
 8005c60:	2100      	movs	r1, #0
 8005c62:	4628      	mov	r0, r5
 8005c64:	f7fa fabc 	bl	80001e0 <memchr>
 8005c68:	b108      	cbz	r0, 8005c6e <_printf_i+0x1f2>
 8005c6a:	1b40      	subs	r0, r0, r5
 8005c6c:	6060      	str	r0, [r4, #4]
 8005c6e:	6863      	ldr	r3, [r4, #4]
 8005c70:	6123      	str	r3, [r4, #16]
 8005c72:	2300      	movs	r3, #0
 8005c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c78:	e7a8      	b.n	8005bcc <_printf_i+0x150>
 8005c7a:	6923      	ldr	r3, [r4, #16]
 8005c7c:	462a      	mov	r2, r5
 8005c7e:	4649      	mov	r1, r9
 8005c80:	4640      	mov	r0, r8
 8005c82:	47d0      	blx	sl
 8005c84:	3001      	adds	r0, #1
 8005c86:	d0ab      	beq.n	8005be0 <_printf_i+0x164>
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	079b      	lsls	r3, r3, #30
 8005c8c:	d413      	bmi.n	8005cb6 <_printf_i+0x23a>
 8005c8e:	68e0      	ldr	r0, [r4, #12]
 8005c90:	9b03      	ldr	r3, [sp, #12]
 8005c92:	4298      	cmp	r0, r3
 8005c94:	bfb8      	it	lt
 8005c96:	4618      	movlt	r0, r3
 8005c98:	e7a4      	b.n	8005be4 <_printf_i+0x168>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	4632      	mov	r2, r6
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	47d0      	blx	sl
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d09b      	beq.n	8005be0 <_printf_i+0x164>
 8005ca8:	3501      	adds	r5, #1
 8005caa:	68e3      	ldr	r3, [r4, #12]
 8005cac:	9903      	ldr	r1, [sp, #12]
 8005cae:	1a5b      	subs	r3, r3, r1
 8005cb0:	42ab      	cmp	r3, r5
 8005cb2:	dcf2      	bgt.n	8005c9a <_printf_i+0x21e>
 8005cb4:	e7eb      	b.n	8005c8e <_printf_i+0x212>
 8005cb6:	2500      	movs	r5, #0
 8005cb8:	f104 0619 	add.w	r6, r4, #25
 8005cbc:	e7f5      	b.n	8005caa <_printf_i+0x22e>
 8005cbe:	bf00      	nop
 8005cc0:	080060a5 	.word	0x080060a5
 8005cc4:	080060b6 	.word	0x080060b6

08005cc8 <memmove>:
 8005cc8:	4288      	cmp	r0, r1
 8005cca:	b510      	push	{r4, lr}
 8005ccc:	eb01 0402 	add.w	r4, r1, r2
 8005cd0:	d902      	bls.n	8005cd8 <memmove+0x10>
 8005cd2:	4284      	cmp	r4, r0
 8005cd4:	4623      	mov	r3, r4
 8005cd6:	d807      	bhi.n	8005ce8 <memmove+0x20>
 8005cd8:	1e43      	subs	r3, r0, #1
 8005cda:	42a1      	cmp	r1, r4
 8005cdc:	d008      	beq.n	8005cf0 <memmove+0x28>
 8005cde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ce2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ce6:	e7f8      	b.n	8005cda <memmove+0x12>
 8005ce8:	4402      	add	r2, r0
 8005cea:	4601      	mov	r1, r0
 8005cec:	428a      	cmp	r2, r1
 8005cee:	d100      	bne.n	8005cf2 <memmove+0x2a>
 8005cf0:	bd10      	pop	{r4, pc}
 8005cf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cfa:	e7f7      	b.n	8005cec <memmove+0x24>

08005cfc <_free_r>:
 8005cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cfe:	2900      	cmp	r1, #0
 8005d00:	d044      	beq.n	8005d8c <_free_r+0x90>
 8005d02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d06:	9001      	str	r0, [sp, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f1a1 0404 	sub.w	r4, r1, #4
 8005d0e:	bfb8      	it	lt
 8005d10:	18e4      	addlt	r4, r4, r3
 8005d12:	f000 f913 	bl	8005f3c <__malloc_lock>
 8005d16:	4a1e      	ldr	r2, [pc, #120]	; (8005d90 <_free_r+0x94>)
 8005d18:	9801      	ldr	r0, [sp, #4]
 8005d1a:	6813      	ldr	r3, [r2, #0]
 8005d1c:	b933      	cbnz	r3, 8005d2c <_free_r+0x30>
 8005d1e:	6063      	str	r3, [r4, #4]
 8005d20:	6014      	str	r4, [r2, #0]
 8005d22:	b003      	add	sp, #12
 8005d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d28:	f000 b90e 	b.w	8005f48 <__malloc_unlock>
 8005d2c:	42a3      	cmp	r3, r4
 8005d2e:	d908      	bls.n	8005d42 <_free_r+0x46>
 8005d30:	6825      	ldr	r5, [r4, #0]
 8005d32:	1961      	adds	r1, r4, r5
 8005d34:	428b      	cmp	r3, r1
 8005d36:	bf01      	itttt	eq
 8005d38:	6819      	ldreq	r1, [r3, #0]
 8005d3a:	685b      	ldreq	r3, [r3, #4]
 8005d3c:	1949      	addeq	r1, r1, r5
 8005d3e:	6021      	streq	r1, [r4, #0]
 8005d40:	e7ed      	b.n	8005d1e <_free_r+0x22>
 8005d42:	461a      	mov	r2, r3
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	b10b      	cbz	r3, 8005d4c <_free_r+0x50>
 8005d48:	42a3      	cmp	r3, r4
 8005d4a:	d9fa      	bls.n	8005d42 <_free_r+0x46>
 8005d4c:	6811      	ldr	r1, [r2, #0]
 8005d4e:	1855      	adds	r5, r2, r1
 8005d50:	42a5      	cmp	r5, r4
 8005d52:	d10b      	bne.n	8005d6c <_free_r+0x70>
 8005d54:	6824      	ldr	r4, [r4, #0]
 8005d56:	4421      	add	r1, r4
 8005d58:	1854      	adds	r4, r2, r1
 8005d5a:	42a3      	cmp	r3, r4
 8005d5c:	6011      	str	r1, [r2, #0]
 8005d5e:	d1e0      	bne.n	8005d22 <_free_r+0x26>
 8005d60:	681c      	ldr	r4, [r3, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	6053      	str	r3, [r2, #4]
 8005d66:	4421      	add	r1, r4
 8005d68:	6011      	str	r1, [r2, #0]
 8005d6a:	e7da      	b.n	8005d22 <_free_r+0x26>
 8005d6c:	d902      	bls.n	8005d74 <_free_r+0x78>
 8005d6e:	230c      	movs	r3, #12
 8005d70:	6003      	str	r3, [r0, #0]
 8005d72:	e7d6      	b.n	8005d22 <_free_r+0x26>
 8005d74:	6825      	ldr	r5, [r4, #0]
 8005d76:	1961      	adds	r1, r4, r5
 8005d78:	428b      	cmp	r3, r1
 8005d7a:	bf04      	itt	eq
 8005d7c:	6819      	ldreq	r1, [r3, #0]
 8005d7e:	685b      	ldreq	r3, [r3, #4]
 8005d80:	6063      	str	r3, [r4, #4]
 8005d82:	bf04      	itt	eq
 8005d84:	1949      	addeq	r1, r1, r5
 8005d86:	6021      	streq	r1, [r4, #0]
 8005d88:	6054      	str	r4, [r2, #4]
 8005d8a:	e7ca      	b.n	8005d22 <_free_r+0x26>
 8005d8c:	b003      	add	sp, #12
 8005d8e:	bd30      	pop	{r4, r5, pc}
 8005d90:	20012f90 	.word	0x20012f90

08005d94 <sbrk_aligned>:
 8005d94:	b570      	push	{r4, r5, r6, lr}
 8005d96:	4e0e      	ldr	r6, [pc, #56]	; (8005dd0 <sbrk_aligned+0x3c>)
 8005d98:	460c      	mov	r4, r1
 8005d9a:	6831      	ldr	r1, [r6, #0]
 8005d9c:	4605      	mov	r5, r0
 8005d9e:	b911      	cbnz	r1, 8005da6 <sbrk_aligned+0x12>
 8005da0:	f000 f8bc 	bl	8005f1c <_sbrk_r>
 8005da4:	6030      	str	r0, [r6, #0]
 8005da6:	4621      	mov	r1, r4
 8005da8:	4628      	mov	r0, r5
 8005daa:	f000 f8b7 	bl	8005f1c <_sbrk_r>
 8005dae:	1c43      	adds	r3, r0, #1
 8005db0:	d00a      	beq.n	8005dc8 <sbrk_aligned+0x34>
 8005db2:	1cc4      	adds	r4, r0, #3
 8005db4:	f024 0403 	bic.w	r4, r4, #3
 8005db8:	42a0      	cmp	r0, r4
 8005dba:	d007      	beq.n	8005dcc <sbrk_aligned+0x38>
 8005dbc:	1a21      	subs	r1, r4, r0
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f000 f8ac 	bl	8005f1c <_sbrk_r>
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	d101      	bne.n	8005dcc <sbrk_aligned+0x38>
 8005dc8:	f04f 34ff 	mov.w	r4, #4294967295
 8005dcc:	4620      	mov	r0, r4
 8005dce:	bd70      	pop	{r4, r5, r6, pc}
 8005dd0:	20012f94 	.word	0x20012f94

08005dd4 <_malloc_r>:
 8005dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd8:	1ccd      	adds	r5, r1, #3
 8005dda:	f025 0503 	bic.w	r5, r5, #3
 8005dde:	3508      	adds	r5, #8
 8005de0:	2d0c      	cmp	r5, #12
 8005de2:	bf38      	it	cc
 8005de4:	250c      	movcc	r5, #12
 8005de6:	2d00      	cmp	r5, #0
 8005de8:	4607      	mov	r7, r0
 8005dea:	db01      	blt.n	8005df0 <_malloc_r+0x1c>
 8005dec:	42a9      	cmp	r1, r5
 8005dee:	d905      	bls.n	8005dfc <_malloc_r+0x28>
 8005df0:	230c      	movs	r3, #12
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	2600      	movs	r6, #0
 8005df6:	4630      	mov	r0, r6
 8005df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dfc:	4e2e      	ldr	r6, [pc, #184]	; (8005eb8 <_malloc_r+0xe4>)
 8005dfe:	f000 f89d 	bl	8005f3c <__malloc_lock>
 8005e02:	6833      	ldr	r3, [r6, #0]
 8005e04:	461c      	mov	r4, r3
 8005e06:	bb34      	cbnz	r4, 8005e56 <_malloc_r+0x82>
 8005e08:	4629      	mov	r1, r5
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	f7ff ffc2 	bl	8005d94 <sbrk_aligned>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	4604      	mov	r4, r0
 8005e14:	d14d      	bne.n	8005eb2 <_malloc_r+0xde>
 8005e16:	6834      	ldr	r4, [r6, #0]
 8005e18:	4626      	mov	r6, r4
 8005e1a:	2e00      	cmp	r6, #0
 8005e1c:	d140      	bne.n	8005ea0 <_malloc_r+0xcc>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	4631      	mov	r1, r6
 8005e22:	4638      	mov	r0, r7
 8005e24:	eb04 0803 	add.w	r8, r4, r3
 8005e28:	f000 f878 	bl	8005f1c <_sbrk_r>
 8005e2c:	4580      	cmp	r8, r0
 8005e2e:	d13a      	bne.n	8005ea6 <_malloc_r+0xd2>
 8005e30:	6821      	ldr	r1, [r4, #0]
 8005e32:	3503      	adds	r5, #3
 8005e34:	1a6d      	subs	r5, r5, r1
 8005e36:	f025 0503 	bic.w	r5, r5, #3
 8005e3a:	3508      	adds	r5, #8
 8005e3c:	2d0c      	cmp	r5, #12
 8005e3e:	bf38      	it	cc
 8005e40:	250c      	movcc	r5, #12
 8005e42:	4629      	mov	r1, r5
 8005e44:	4638      	mov	r0, r7
 8005e46:	f7ff ffa5 	bl	8005d94 <sbrk_aligned>
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	d02b      	beq.n	8005ea6 <_malloc_r+0xd2>
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	442b      	add	r3, r5
 8005e52:	6023      	str	r3, [r4, #0]
 8005e54:	e00e      	b.n	8005e74 <_malloc_r+0xa0>
 8005e56:	6822      	ldr	r2, [r4, #0]
 8005e58:	1b52      	subs	r2, r2, r5
 8005e5a:	d41e      	bmi.n	8005e9a <_malloc_r+0xc6>
 8005e5c:	2a0b      	cmp	r2, #11
 8005e5e:	d916      	bls.n	8005e8e <_malloc_r+0xba>
 8005e60:	1961      	adds	r1, r4, r5
 8005e62:	42a3      	cmp	r3, r4
 8005e64:	6025      	str	r5, [r4, #0]
 8005e66:	bf18      	it	ne
 8005e68:	6059      	strne	r1, [r3, #4]
 8005e6a:	6863      	ldr	r3, [r4, #4]
 8005e6c:	bf08      	it	eq
 8005e6e:	6031      	streq	r1, [r6, #0]
 8005e70:	5162      	str	r2, [r4, r5]
 8005e72:	604b      	str	r3, [r1, #4]
 8005e74:	4638      	mov	r0, r7
 8005e76:	f104 060b 	add.w	r6, r4, #11
 8005e7a:	f000 f865 	bl	8005f48 <__malloc_unlock>
 8005e7e:	f026 0607 	bic.w	r6, r6, #7
 8005e82:	1d23      	adds	r3, r4, #4
 8005e84:	1af2      	subs	r2, r6, r3
 8005e86:	d0b6      	beq.n	8005df6 <_malloc_r+0x22>
 8005e88:	1b9b      	subs	r3, r3, r6
 8005e8a:	50a3      	str	r3, [r4, r2]
 8005e8c:	e7b3      	b.n	8005df6 <_malloc_r+0x22>
 8005e8e:	6862      	ldr	r2, [r4, #4]
 8005e90:	42a3      	cmp	r3, r4
 8005e92:	bf0c      	ite	eq
 8005e94:	6032      	streq	r2, [r6, #0]
 8005e96:	605a      	strne	r2, [r3, #4]
 8005e98:	e7ec      	b.n	8005e74 <_malloc_r+0xa0>
 8005e9a:	4623      	mov	r3, r4
 8005e9c:	6864      	ldr	r4, [r4, #4]
 8005e9e:	e7b2      	b.n	8005e06 <_malloc_r+0x32>
 8005ea0:	4634      	mov	r4, r6
 8005ea2:	6876      	ldr	r6, [r6, #4]
 8005ea4:	e7b9      	b.n	8005e1a <_malloc_r+0x46>
 8005ea6:	230c      	movs	r3, #12
 8005ea8:	603b      	str	r3, [r7, #0]
 8005eaa:	4638      	mov	r0, r7
 8005eac:	f000 f84c 	bl	8005f48 <__malloc_unlock>
 8005eb0:	e7a1      	b.n	8005df6 <_malloc_r+0x22>
 8005eb2:	6025      	str	r5, [r4, #0]
 8005eb4:	e7de      	b.n	8005e74 <_malloc_r+0xa0>
 8005eb6:	bf00      	nop
 8005eb8:	20012f90 	.word	0x20012f90

08005ebc <_realloc_r>:
 8005ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec0:	4680      	mov	r8, r0
 8005ec2:	4614      	mov	r4, r2
 8005ec4:	460e      	mov	r6, r1
 8005ec6:	b921      	cbnz	r1, 8005ed2 <_realloc_r+0x16>
 8005ec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ecc:	4611      	mov	r1, r2
 8005ece:	f7ff bf81 	b.w	8005dd4 <_malloc_r>
 8005ed2:	b92a      	cbnz	r2, 8005ee0 <_realloc_r+0x24>
 8005ed4:	f7ff ff12 	bl	8005cfc <_free_r>
 8005ed8:	4625      	mov	r5, r4
 8005eda:	4628      	mov	r0, r5
 8005edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ee0:	f000 f838 	bl	8005f54 <_malloc_usable_size_r>
 8005ee4:	4284      	cmp	r4, r0
 8005ee6:	4607      	mov	r7, r0
 8005ee8:	d802      	bhi.n	8005ef0 <_realloc_r+0x34>
 8005eea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005eee:	d812      	bhi.n	8005f16 <_realloc_r+0x5a>
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	4640      	mov	r0, r8
 8005ef4:	f7ff ff6e 	bl	8005dd4 <_malloc_r>
 8005ef8:	4605      	mov	r5, r0
 8005efa:	2800      	cmp	r0, #0
 8005efc:	d0ed      	beq.n	8005eda <_realloc_r+0x1e>
 8005efe:	42bc      	cmp	r4, r7
 8005f00:	4622      	mov	r2, r4
 8005f02:	4631      	mov	r1, r6
 8005f04:	bf28      	it	cs
 8005f06:	463a      	movcs	r2, r7
 8005f08:	f7ff fbaa 	bl	8005660 <memcpy>
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4640      	mov	r0, r8
 8005f10:	f7ff fef4 	bl	8005cfc <_free_r>
 8005f14:	e7e1      	b.n	8005eda <_realloc_r+0x1e>
 8005f16:	4635      	mov	r5, r6
 8005f18:	e7df      	b.n	8005eda <_realloc_r+0x1e>
	...

08005f1c <_sbrk_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4d06      	ldr	r5, [pc, #24]	; (8005f38 <_sbrk_r+0x1c>)
 8005f20:	2300      	movs	r3, #0
 8005f22:	4604      	mov	r4, r0
 8005f24:	4608      	mov	r0, r1
 8005f26:	602b      	str	r3, [r5, #0]
 8005f28:	f7fa feec 	bl	8000d04 <_sbrk>
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d102      	bne.n	8005f36 <_sbrk_r+0x1a>
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	b103      	cbz	r3, 8005f36 <_sbrk_r+0x1a>
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	bd38      	pop	{r3, r4, r5, pc}
 8005f38:	20012f98 	.word	0x20012f98

08005f3c <__malloc_lock>:
 8005f3c:	4801      	ldr	r0, [pc, #4]	; (8005f44 <__malloc_lock+0x8>)
 8005f3e:	f000 b811 	b.w	8005f64 <__retarget_lock_acquire_recursive>
 8005f42:	bf00      	nop
 8005f44:	20012f9c 	.word	0x20012f9c

08005f48 <__malloc_unlock>:
 8005f48:	4801      	ldr	r0, [pc, #4]	; (8005f50 <__malloc_unlock+0x8>)
 8005f4a:	f000 b80c 	b.w	8005f66 <__retarget_lock_release_recursive>
 8005f4e:	bf00      	nop
 8005f50:	20012f9c 	.word	0x20012f9c

08005f54 <_malloc_usable_size_r>:
 8005f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f58:	1f18      	subs	r0, r3, #4
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	bfbc      	itt	lt
 8005f5e:	580b      	ldrlt	r3, [r1, r0]
 8005f60:	18c0      	addlt	r0, r0, r3
 8005f62:	4770      	bx	lr

08005f64 <__retarget_lock_acquire_recursive>:
 8005f64:	4770      	bx	lr

08005f66 <__retarget_lock_release_recursive>:
 8005f66:	4770      	bx	lr

08005f68 <_init>:
 8005f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6a:	bf00      	nop
 8005f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6e:	bc08      	pop	{r3}
 8005f70:	469e      	mov	lr, r3
 8005f72:	4770      	bx	lr

08005f74 <_fini>:
 8005f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f76:	bf00      	nop
 8005f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7a:	bc08      	pop	{r3}
 8005f7c:	469e      	mov	lr, r3
 8005f7e:	4770      	bx	lr
